{
    "messages": [
        [
            {
                "role": "User",
                "content": "Hi Renesas Team,\n\nI am trying to send my beaconing information on every 1hour\u00a0one sample I am\u00a0advertising.\u00a0\n\nRunning the timer internally\u00a0using MCU core, and when time reaches 1 hour then I will enable the RF core beacon activity, advertise the beacon data and disable the RF core and do the process forever without rebooting the device. please suggest the logic.\n\nI am trying this logic in DA14531MOD\u00a0hostless.\n\nThanks,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for posting your question online.\n\nQuote: I am trying to send my beaconing information on every 1hour\u00a0one sample I am\u00a0advertising.\u00a0\n\nRunning the timer internally\u00a0using MCU core, and when time reaches 1 hour then I will enable the RF core beacon activity, advertise the beacon data and disable the RF core and do the process forever without rebooting the device. please suggest the logic.\n\nI am trying this logic in DA14531MOD\u00a0hostless.\n\nYes, this is possible with the DA14531MOD.You can have the following scenario:You follow the ibeacon: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/ibeaconexample and the ble_app_sleepmode example (inside the SDK6).Note: We also have on Git examples for Eddystone beacon.You can start a timer (i.e. for 5seconds), start advertising, after 5 seconds the timer will expire and we stop advertising.When we stop advertising you can implement either Extended Sleep without advertising or Deep Sleep.In both cases you can have RTC configured in order to set an interrupt after 1 hour. After 1 hour repeat.Please refer on our SDK6 examples and the Tutorials on the DA14531 product page for more information.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "\nHi Renesas,\n\n\n\nThanks for your response.\n\n\nI did the same and implemented\u00a0the ibeacon logic and testing for every 30 secs\u00a0for testing wise.\n\n\nAttached\u00a0the code is working and sending for every 30 secs\u00a0and after 15 minutes the\u00a0device is getting\u00a0rebooted.\n\n\nMy logic is here initially the device is in connectable mode --> once i configure all the GATT services\u00a0to disconnect it goes in\n\nnon-connectable mode and starts running the timer and then it broadcasts the ibeacon advertisements based on timer\n30sec\u00a0given as an example.\n\n\nBut after some 15 minutes the device is getting\u00a0rebooted. Is there\u00a0any issue or modifications required under ble stack.\n\n\nI have attached the code for your reference.\n\n\nRegards,\nKumar\n\ncommunity.renesas.com/.../beacon.c: https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/beacon.c\u00a0 \u00a0/**\r\n ****************************************************************************************\r\n *\r\n * @file user_callback_config.h\r\n *\r\n * @brief Callback functions configuration file.\r\n *\r\n * Copyright (C) 2015-2019 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _USER_CALLBACK_CONFIG_H_\r\n#define _USER_CALLBACK_CONFIG_H_\r\n\r\n/*\r\n * INCLUDE FILES\r\n ****************************************************************************************\r\n */\r\n\r\n#include <stdio.h>\r\n#include \"app_callback.h\"\r\n#include \"app_default_handlers.h\"\r\n#include \"app_entry_point.h\"\r\n#include \"app_prf_types.h\"\r\n#if (BLE_APP_SEC)\r\n#include \"app_bond_db.h\"\r\n#endif // (BLE_APP_SEC)\r\n#include \"user_peripheral.h\"\r\n\r\n/*\r\n * LOCAL VARIABLE DEFINITIONS\r\n ****************************************************************************************\r\n */\r\nstatic const struct app_suotar_cb user_app_suotar_cb = {\r\n    .on_suotar_status_change = on_suotar_status_change,\r\n};\r\n\r\nstatic const struct app_callbacks user_app_callbacks = {\r\n    .app_on_connection                  = user_app_connection,\r\n    .app_on_disconnect                  = user_app_disconnect,\r\n    .app_on_update_params_rejected      = NULL,\r\n    .app_on_update_params_complete      = NULL,\r\n    .app_on_set_dev_config_complete     = default_app_on_set_dev_config_complete,\r\n    .app_on_adv_nonconn_complete        = user_app_adv_undirect_complete,//NULL,\r\n    .app_on_adv_undirect_complete       = user_app_adv_undirect_complete,\r\n    .app_on_adv_direct_complete         = NULL,\r\n    .app_on_db_init_complete            = default_app_on_db_init_complete,\r\n    .app_on_scanning_completed          = NULL,\r\n    .app_on_adv_report_ind              = NULL,\r\n    .app_on_get_dev_name                = default_app_on_get_dev_name,\r\n    .app_on_get_dev_appearance          = default_app_on_get_dev_appearance,\r\n    .app_on_get_dev_slv_pref_params     = default_app_on_get_dev_slv_pref_params,\r\n    .app_on_set_dev_info                = default_app_on_set_dev_info,\r\n    .app_on_data_length_change          = NULL,\r\n    .app_on_update_params_request       = default_app_update_params_request,\r\n    .app_on_generate_static_random_addr = default_app_generate_static_random_addr,\r\n    .app_on_svc_changed_cfg_ind         = NULL,\r\n    .app_on_get_peer_features           = NULL,\r\n#if (BLE_APP_SEC)\r\n    .app_on_pairing_request             = default_app_on_pairing_request,\r\n    .app_on_tk_exch                     = user_app_on_tk_exch,\r\n    .app_on_irk_exch                    = NULL,\r\n    .app_on_csrk_exch                   = default_app_on_csrk_exch,\r\n    .app_on_ltk_exch                    = default_app_on_ltk_exch,\r\n    .app_on_pairing_succeeded           = default_app_on_pairing_succeeded,\r\n    .app_on_encrypt_ind                 = NULL,\r\n    .app_on_encrypt_req_ind             = default_app_on_encrypt_req_ind,\r\n    .app_on_security_req_ind            = NULL,\r\n    .app_on_addr_solved_ind             = default_app_on_addr_solved_ind,\r\n    .app_on_addr_resolve_failed         = default_app_on_addr_resolve_failed,\r\n    .app_on_ral_cmp_evt                 = default_app_on_ral_cmp_evt,\r\n    .app_on_ral_size_ind                = NULL,\r\n    .app_on_ral_addr_ind                = NULL,\r\n#endif // (BLE_APP_SEC)\r\n};\r\n\r\n#if (BLE_APP_SEC)\r\nstatic const struct app_bond_db_callbacks user_app_bond_db_callbacks = {\r\n    .app_bdb_init                       = default_app_bdb_init,\r\n    .app_bdb_get_size                   = default_app_bdb_get_size,\r\n    .app_bdb_add_entry                  = default_app_bdb_add_entry,\r\n    .app_bdb_remove_entry               = NULL,\r\n    .app_bdb_search_entry               = default_app_bdb_search_entry,\r\n    .app_bdb_get_number_of_stored_irks  = default_app_bdb_get_number_of_stored_irks,\r\n    .app_bdb_get_stored_irks            = default_app_bdb_get_stored_irks,\r\n    .app_bdb_get_device_info_from_slot  = default_app_bdb_get_device_info_from_slot,\r\n};\r\n#endif // (BLE_APP_SEC)\r\n\r\n\r\n/*\r\n * \"app_process_catch_rest_cb\" symbol handling:\r\n * - Use #define if \"user_catch_rest_hndl\" is defined by the user\r\n * - Use const declaration if \"user_catch_rest_hndl\" is NULL\r\n */\r\n#define app_process_catch_rest_cb       user_catch_rest_hndl\r\n// static const catch_rest_event_func_t app_process_catch_rest_cb = NULL;\r\n\r\nstatic const struct arch_main_loop_callbacks user_app_main_loop_callbacks = {\r\n    .app_on_init            = user_app_init,\r\n\r\n    // By default the watchdog timer is reloaded and resumed when the system wakes up.\r\n    // The user has to take into account the watchdog timer handling (keep it running,\r\n    // freeze it, reload it, resume it, etc), when the app_on_ble_powered() is being\r\n    // called and may potentially affect the main loop.\r\n    .app_on_ble_powered     = NULL,\r\n\r\n    // By default the watchdog timer is reloaded and resumed when the system wakes up.\r\n    // The user has to take into account the watchdog timer handling (keep it running,\r\n    // freeze it, reload it, resume it, etc), when the app_on_system_powered() is being\r\n    // called and may potentially affect the main loop.\r\n    .app_on_system_powered  = NULL,\r\n\r\n    .app_before_sleep       = NULL,\r\n    .app_validate_sleep     = NULL,\r\n    .app_going_to_sleep     = NULL,\r\n    .app_resume_from_sleep  = NULL,\r\n};\r\n\r\n// Default Handler Operations\r\nstatic const struct default_app_operations user_default_app_operations = {\r\n    .default_operation_adv = user_app_adv_start,\r\n};\r\n\r\n// Place in this structure the app_<profile>_db_create and app_<profile>_enable functions\r\n// for SIG profiles that do not have this function already implemented in the SDK\r\n// or if you want to override the functionality. Check the prf_func array in the SDK\r\n// for your reference of which profiles are supported.\r\nstatic const struct prf_func_callbacks user_prf_funcs[] =\r\n{\r\n    {TASK_ID_INVALID,    NULL, NULL}   // DO NOT MOVE. Must always be last\r\n};\r\n\r\n#endif // _USER_CALLBACK_CONFIG_H_\r\n\n\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply.\n\nQuote: Attached\u00a0the code is working and sending for every 30 secs\u00a0and after 15 minutes the\u00a0device is getting\u00a0rebooted.\n\nThis sounds to me like the WatchDog expired and you got HW reset.\u00a0Have you attached a debugger to see where exactly the project crashes?\u00a0If it the project is stuck in:\r\nvoid platform_reset_func(uint32_t error)\r\n{\r\n    uint16_t tmp;\r\n\r\n#if (!PRODUCTION_TEST)\r\n    // Trigger assert if the reset reason is other than RESET_AFTER_SUOTA_UPDATE\r\n    ASSERT_WARNING(error == RESET_AFTER_SUOTA_UPDATE);\r\n#endif\r\n    // Trigger SW reset\r\n    tmp = GetWord16(SYS_CTRL_REG);\r\n    tmp = (tmp & ~REMAP_ADR0) | 0; // Map ROM at address 0\r\n    tmp |= SW_RESET;\r\n    SetWord16(SYS_CTRL_REG, tmp);\r\n}That means that you have a Heap Exhaustion issue.You can try to increase the Heap size from the da1458x_config_advanced.h file:/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n// #define DB_HEAP_SZ              1024\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\nBased on the source code you shared:1) You have 2\u00a0user_app_disconnect functions2) On user_app_disconnect you start advertising and immediately after you call the Stop advertising API, but on the custom callback\u00a0user_app_adv_undirect_complete you restart advertising. I do not understand the concept there.\u00a03) Have you implemented Deep Sleep or Extended Sleep without Advertising?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\nThanks\u00a0for your response. Based on your suggestion i modified the below fields:\n\n\nI already called the EXTENDED sleep in \"da1458x_config_advanced\".\n\nstatic const sleep_state_t app_default_sleep_mode = ARCH_EXT_SLEEP_ON;\n\n\nI increased the Heap size to\u00a0#define DB_HEAP_SZ\u00a0 4096\u00a0from the da1458x_config_advanced.h file:\n\u00a0\nSorry i just called twice in your shared file, but in my actual file one time called \"user_app_disconnect\"\n\u00a0\nuser_app_adv_undirect_complete called in call backup, then only my ibeacon transmitting every 30 secs without missing.\u00a0In general,\u00a0it will show BLE basic manufacturer data. But every 30secs iBeacon data will be advertising.\n\u00a0\nAny watchdog related\u00a0modifications required? please suggest.\n\u00a0\nThanks,\nKumar\n\n/**\r\n ****************************************************************************************\r\n *\r\n * @file da1458x_config_advanced.h\r\n *\r\n * @brief Advanced compile configuration file.\r\n *\r\n * Copyright (C) 2014-2020 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _DA1458X_CONFIG_ADVANCED_H_\r\n#define _DA1458X_CONFIG_ADVANCED_H_\r\n\r\n#include \"da1458x_stack_config.h\"\r\n\r\n#if !defined (__DA14531__)\r\n\r\n/****************************************************************************************************************/\r\n/* Low Power clock selection.                                                                                   */\r\n/*      -LP_CLK_XTAL32      External XTAL32K oscillator                                                         */\r\n/*      -LP_CLK_RCX20       Internal RCX clock                                                                  */\r\n/*      -LP_CLK_FROM_OTP    Use the selection in the corresponding field of OTP Header                          */\r\n/****************************************************************************************************************/\r\n#define CFG_LP_CLK              LP_CLK_XTAL32\r\n\r\n/****************************************************************************************************************/\r\n/* If defined the application uses a hardcoded value for XTAL16M trimming. Should be disabled for devices       */\r\n/* where XTAL16M is calibrated and trim value is stored in OTP.                                                 */\r\n/* Important note. The hardcoded value is the average value of the trimming values giving the optimal results   */\r\n/* for DA14585 DK devices. May not be applicable in other designs                                               */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_DEFAULT_XTAL16M_TRIM_VALUE_IF_NOT_CALIBRATED\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period to poll GTL iface. Time in msec.                                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_PERIODIC_WAKEUP_MS                  500  // 0.5s\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period if GTL iface is not enabled. Time in msec.                                            */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_EXTERNAL_WAKEUP_MS              600000  // 600s\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup from external processor running host application.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_EXTERNAL_WAKEUP\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup external processor when a message is sent to GTL                                                      */\r\n/****************************************************************************************************************/\r\n#undef CFG_WAKEUP_EXT_PROCESSOR\r\n\r\n/****************************************************************************************************************/\r\n/* Enables True Random Number Generator. A true random number, generated at system initialization, is used to   */\r\n/* seed any random number generator (C standard library, ChaCha20, etc.). The following supported options       */\r\n/* provide a trade-off between code size and start-up latency.                                                  */\r\n/* - undefined (or 0): TRNG is disabled.                                                                        */\r\n/* -   32:  Enables TRNG with   32 Bytes Buffer.                                                                */\r\n/* -   64:  Enables TRNG with   64 Bytes Buffer.                                                                */\r\n/* -  128:  Enables TRNG with  128 Bytes Buffer.                                                                */\r\n/* -  256:  Enables TRNG with  256 Bytes Buffer.                                                                */\r\n/* -  512:  Enables TRNG with  512 Bytes Buffer.                                                                */\r\n/* - 1024:  Enables TRNG with 1024 Bytes Buffer.                                                                */\r\n/****************************************************************************************************************/\r\n#define CFG_TRNG (1024)\r\n\r\n/****************************************************************************************************************/\r\n/* Creation of private and public keys using Elliptic Curve Diffie Hellman algorithms.                          */\r\n/* - defined:   Creation of ECDH keys and secure connection feature is enabled.                                 */\r\n/* - undefined: Creation of ECDH keys and secure connection feature is disabled. If application does not        */\r\n/*              support secure connections, it is reccomended to undefine CFG_ENABLE_SMP_SECURE in order to     */\r\n/*              enable faster start-up time and reduce code size.                                               */\r\n/****************************************************************************************************************/\r\n#undef CFG_ENABLE_SMP_SECURE\r\n\r\n/****************************************************************************************************************/\r\n/* Uses ChaCha20 random number generator instead of the C standard library random number generator.             */\r\n/****************************************************************************************************************/\r\n#undef CFG_USE_CHACHA20_RAND\r\n\r\n/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n// #define DB_HEAP_SZ              1024\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\n\r\n/****************************************************************************************************************/\r\n/* NVDS configuration                                                                                           */\r\n/* - CFG_NVDS_TAG_BD_ADDRESS            Default bdaddress. If bdaddress is written in OTP header this value is  */\r\n/*                                      ignored                                                                 */\r\n/* - CFG_NVDS_TAG_LPCLK_DRIFT           Low power clock drift. Permitted values in ppm are:                     */\r\n/*      + DRIFT_20PPM                                                                                           */\r\n/*      + DRIFT_30PPM                                                                                           */\r\n/*      + DRIFT_50PPM                                                                                           */\r\n/*      + DRIFT_75PPM                                                                                           */\r\n/*      + DRIFT_100PPM                                                                                          */\r\n/*      + DRIFT_150PPM                                                                                          */\r\n/*      + DRIFT_250PPM                                                                                          */\r\n/*      + DRIFT_500PPM                  Default value (500 ppm)                                                 */\r\n/* - CFG_NVDS_TAG_BLE_CA_TIMER_DUR      Channel Assessment Timer duration (Multiple of 10ms)                    */\r\n/* - CFG_NVDS_TAG_BLE_CRA_TIMER_DUR     Channel Reassessment Timer duration (Multiple of CA timer duration)     */\r\n/* - CFG_NVDS_TAG_BLE_CA_MIN_RSSI       Minimum RSSI Threshold                                                  */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_PKT         Number of packets to receive for statistics                             */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT     Number  of bad packets needed to remove a channel                       */\r\n/****************************************************************************************************************/\r\n#define CFG_NVDS_TAG_BD_ADDRESS             {0x03, 0x00, 0x70, 0xCA, 0xEA, 0x80}\r\n\r\n#define CFG_NVDS_TAG_LPCLK_DRIFT            DRIFT_500PPM\r\n#define CFG_NVDS_TAG_BLE_CA_TIMER_DUR       2000\r\n#define CFG_NVDS_TAG_BLE_CRA_TIMER_DUR      6\r\n#define CFG_NVDS_TAG_BLE_CA_MIN_RSSI        0x40\r\n#define CFG_NVDS_TAG_BLE_CA_NB_PKT          100\r\n#define CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT      50\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the logging of heap memories usage. The feature can be used in development/debug mode.               */\r\n/* Application must be executed in Keil debugger environment and \"da14585_586.lib\" must be replaced with        */\r\n/* \"da14585_586_with_heap_logging.lib\" in project structure under sdk_arch. Developer must stop execution       */\r\n/* and type disp_heaplog() in debugger's command window. Heap memory statistics will be displayed on window     */\r\n/****************************************************************************************************************/\r\n#undef CFG_LOG_HEAP_USAGE\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the BLE statistics measurement feature.                                                              */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_METRICS\r\n\r\n/****************************************************************************************************************/\r\n/* Output the Hardfault arguments to serial/UART interface.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_PRODUCTION_DEBUG_OUTPUT\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported TX data packet length (supportedMaxTxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxTxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxTxTime = (supportedMaxTxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_TX_PACKET_LENGTH        (251)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported RX data packet length (supportedMaxRxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxRxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxRxTime = (supportedMaxRxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_RX_PACKET_LENGTH        (251)\r\n\r\n/****************************************************************************************************************/\r\n/* Select external application/host transport layer:                                                            */\r\n/*     - 0 = GTL (auto)                                                                                         */\r\n/*     - 1 = HCI (auto)                                                                                         */\r\n/*     - 8 = GTL (fixed)                                                                                        */\r\n/*     - 9 = HCI (fixed)                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_H4TL                    (0)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter max value for the scan report list. The maximum value shall be 100.                         */\r\n/****************************************************************************************************************/\r\n#define CFG_BLE_DUPLICATE_FILTER_MAX    (10)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter flag for the scan report list. This flag controls what will be reported if the              */\r\n/* CFG_BLE_DUPLICATE_FILTER_MAX number is exceeded.                                                             */\r\n/*     - If the flag is defined, the extra devices are considered to be in the list and will not be reported.   */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_DUPLICATE_FILTER_FOUND\r\n\r\n/****************************************************************************************************************/\r\n/* Resolving list maximum size.                                                                                 */\r\n/****************************************************************************************************************/\r\n#define CFG_LLM_RESOLVING_LIST_MAX      LLM_RESOLVING_LIST_MAX\r\n\r\n/****************************************************************************************************************/\r\n/* Enables automatic data packet length negotiation.                                                            */\r\n/* NOTE: Enable only if peer device supports data length extension!!                                            */\r\n/****************************************************************************************************************/\r\n#undef AUTO_DATA_LENGTH_NEGOTIATION_UPON_NEW_CONNECTION\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum retention memory in bytes. The base address of the retention data is calculated from the selected    */\r\n/* size.                                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_SIZE    (2048)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum uninitialized retained data required by the application.                                             */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_UNINIT_SIZE (0)\r\n\r\n/****************************************************************************************************************/\r\n/* The Keil scatter file may be provided by the user. If the user provides his own scatter file, the system has */\r\n/* to be aware which RAM blocks has to retain. The 4th RAM block is always retained, since it contains the ROM  */\r\n/* data.                                                                                                        */\r\n/*     - CFG_RETAIN_RAM_1_BLOCK: if defined, the 1st RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_2_BLOCK: if defined, the 2nd RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_3_BLOCK: if defined, the 3rd RAM block must be retained.                                */\r\n/*                                                                                                              */\r\n/* If the CFG_CUSTOM_SCATTER_FILE flag is undefined, the system knows which blocks to retain based on the       */\r\n/* default SDK scatter file.                                                                                    */\r\n/****************************************************************************************************************/\r\n#undef CFG_CUSTOM_SCATTER_FILE\r\n#ifdef CFG_CUSTOM_SCATTER_FILE\r\n    #define CFG_RETAIN_RAM_1_BLOCK\r\n    #define CFG_RETAIN_RAM_2_BLOCK\r\n    #define CFG_RETAIN_RAM_3_BLOCK\r\n#endif\r\n\r\n/****************************************************************************************************************/\r\n/* Code location selection.                                                                                     */\r\n/*     - CFG_CODE_LOCATION_EXT: Code is loaded from SPI flash / I2C EEPROM / UART                               */\r\n/*     - CFG_CODE_LOCATION_OTP: Code is burned in the OTP                                                       */\r\n/* The above options are mutually exclusive and exactly one of them must be enabled.                            */\r\n/****************************************************************************************************************/\r\n#define CFG_CODE_LOCATION_EXT\r\n#undef CFG_CODE_LOCATION_OTP\r\n\r\n/****************************************************************************************************************/\r\n/* Temperature range selection.                                                                                 */\r\n/* - CFG_HIGH_TEMPERATURE:         Device is configured to operate at high temperature range (-40C to +105C).   */\r\n/* - CFG_AMB_TEMPERATURE:          Device is configured to operate at ambient temperature range (-40C to +40C). */\r\n/* - CFG_MID_TEMPERATURE:          Device is configured to operate at mid temperature range (-40C to +60C).     */\r\n/* - CFG_EXT_TEMPERATURE:          Device is configured to operate at ext temperature range (-40C to +85C).     */\r\n/* NOTE 1: High temperature support is not compatible with power optimizations. User shall undefine the         */\r\n/*         CFG_POWER_OPTIMIZATIONS flag, if device is to support the high temperature range feature.            */\r\n/****************************************************************************************************************/\r\n#define CFG_AMB_TEMPERATURE\r\n\r\n/****************************************************************************************************************/\r\n/* Enable power optimizations using the XTAL16M adaptive settling algorithm.                                    */\r\n/* NOTE: The XTAL16M adaptive settling algorithm works only with XTAL32K and not with RCX, as the LP clock.     */\r\n/****************************************************************************************************************/\r\n#define CFG_XTAL16M_ADAPTIVE_SETTLING\r\n\r\n\r\n\r\n#else\r\n\r\n\r\n\r\n/****************************************************************************************************************/\r\n/* Low Power clock selection.                                                                                   */\r\n/*      -LP_CLK_XTAL32      External XTAL32K oscillator                                                         */\r\n/*      -LP_CLK_RCX20       Internal RCX clock                                                                  */\r\n/*      -LP_CLK_FROM_OTP    Use the selection in the corresponding field of OTP Header                          */\r\n/****************************************************************************************************************/\r\n#define CFG_LP_CLK              LP_CLK_RCX20\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period to poll GTL iface. Time in msec.                                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_PERIODIC_WAKEUP_MS                  500  // 0.5s\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period if GTL iface is not enabled. Time in msec.                                            */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_EXTERNAL_WAKEUP_MS              600000  // 600s\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup from external processor running host application.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_EXTERNAL_WAKEUP\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup external processor when a message is sent to GTL                                                      */\r\n/****************************************************************************************************************/\r\n#undef CFG_WAKEUP_EXT_PROCESSOR\r\n\r\n/****************************************************************************************************************/\r\n/* Enables True Random Number Generator. A true random number, generated at system initialization, is used to   */\r\n/* seed any random number generator (C standard library, ChaCha20, etc.).                                       */\r\n/****************************************************************************************************************/\r\n#define CFG_TRNG\r\n\r\n/****************************************************************************************************************/\r\n/* Creation of private and public keys using Elliptic Curve Diffie Hellman algorithms.                          */\r\n/* - defined:   Creation of ECDH keys and secure connection feature is enabled.                                 */\r\n/* - undefined: Creation of ECDH keys and secure connection feature is disabled. If application does not        */\r\n/*              support secure connections, it is reccomended to undefine CFG_ENABLE_SMP_SECURE in order to     */\r\n/*              enable faster start-up time and reduce code size.                                               */\r\n/****************************************************************************************************************/\r\n#undef CFG_ENABLE_SMP_SECURE\r\n\r\n/****************************************************************************************************************/\r\n/* Uses ChaCha20 random number generator instead of the C standard library random number generator.             */\r\n/****************************************************************************************************************/\r\n#undef CFG_USE_CHACHA20_RAND\r\n\r\n/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n #define DB_HEAP_SZ              2048 //buzz for SUOTA\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\n\r\n/****************************************************************************************************************/\r\n/* NVDS configuration                                                                                           */\r\n/* - CFG_NVDS_TAG_BD_ADDRESS            Default bdaddress. If bdaddress is written in OTP header this value is  */\r\n/*                                      ignored                                                                 */\r\n/* - CFG_NVDS_TAG_LPCLK_DRIFT           Low power clock drift. Permitted values in ppm are:                     */\r\n/*      + DRIFT_20PPM                                                                                           */\r\n/*      + DRIFT_30PPM                                                                                           */\r\n/*      + DRIFT_50PPM                                                                                           */\r\n/*      + DRIFT_75PPM                                                                                           */\r\n/*      + DRIFT_100PPM                                                                                          */\r\n/*      + DRIFT_150PPM                                                                                          */\r\n/*      + DRIFT_250PPM                                                                                          */\r\n/*      + DRIFT_500PPM                  Default value (500 ppm)                                                 */\r\n/* - CFG_NVDS_TAG_BLE_CA_TIMER_DUR      Channel Assessment Timer duration (Multiple of 10ms)                    */\r\n/* - CFG_NVDS_TAG_BLE_CRA_TIMER_DUR     Channel Reassessment Timer duration (Multiple of CA timer duration)     */\r\n/* - CFG_NVDS_TAG_BLE_CA_MIN_RSSI       Minimum RSSI Threshold                                                  */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_PKT         Number of packets to receive for statistics                             */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT     Number  of bad packets needed to remove a channel                       */\r\n/****************************************************************************************************************/\r\n#define CFG_NVDS_TAG_BD_ADDRESS             {0x03, 0x00, 0x70, 0xCA, 0xEA, 0x80}\r\n\r\n#define CFG_NVDS_TAG_LPCLK_DRIFT            DRIFT_500PPM\r\n#define CFG_NVDS_TAG_BLE_CA_TIMER_DUR       2000\r\n#define CFG_NVDS_TAG_BLE_CRA_TIMER_DUR      6\r\n#define CFG_NVDS_TAG_BLE_CA_MIN_RSSI        0x40\r\n#define CFG_NVDS_TAG_BLE_CA_NB_PKT          100\r\n#define CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT      50\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the logging of heap memories usage. The feature can be used in development/debug mode.               */\r\n/* Application must be executed in Keil debugger environment and \"da14531.lib\" must be replaced with            */\r\n/* \"da14531_with_heap_logging.lib\" in project structure under sdk_arch. Developer must stop execution           */\r\n/* and type disp_heaplog() in debugger's command window. Heap memory statistics will be displayed on window     */\r\n/****************************************************************************************************************/\r\n#undef CFG_LOG_HEAP_USAGE\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the BLE statistics measurement feature.                                                              */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_METRICS\r\n\r\n/****************************************************************************************************************/\r\n/* Output the Hardfault arguments to serial/UART interface.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_PRODUCTION_DEBUG_OUTPUT\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported TX data packet length (supportedMaxTxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxTxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxTxTime = (supportedMaxTxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_MAX_TX_PACKET_LENGTH        (251)\r\n#define CFG_MAX_TX_PACKET_LENGTH        (27)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported RX data packet length (supportedMaxRxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxRxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxRxTime = (supportedMaxRxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_MAX_RX_PACKET_LENGTH        (251)\r\n#define CFG_MAX_RX_PACKET_LENGTH        (27)\r\n\r\n/****************************************************************************************************************/\r\n/* Select external application/host transport layer:                                                            */\r\n/*     - 0 = GTL (auto)                                                                                         */\r\n/*     - 1 = HCI (auto)                                                                                         */\r\n/*     - 8 = GTL (fixed)                                                                                        */\r\n/*     - 9 = HCI (fixed)                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_H4TL                    (0)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter max value for the scan report list. The maximum value shall be 100.                         */\r\n/****************************************************************************************************************/\r\n#define CFG_BLE_DUPLICATE_FILTER_MAX    (10)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter flag for the scan report list. This flag controls what will be reported if the              */\r\n/* CFG_BLE_DUPLICATE_FILTER_MAX number is exceeded.                                                             */\r\n/*     - If the flag is defined, the extra devices are considered to be in the list and will not be reported.   */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_DUPLICATE_FILTER_FOUND\r\n\r\n/****************************************************************************************************************/\r\n/* Resolving list maximum size.                                                                                 */\r\n/****************************************************************************************************************/\r\n#define CFG_LLM_RESOLVING_LIST_MAX      LLM_RESOLVING_LIST_MAX\r\n\r\n/****************************************************************************************************************/\r\n/* Enables automatic data packet length negotiation.                                                            */\r\n/* NOTE: Enable only if peer device supports data length extension!!                                            */\r\n/****************************************************************************************************************/\r\n#undef AUTO_DATA_LENGTH_NEGOTIATION_UPON_NEW_CONNECTION\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum retention memory in bytes. The base address of the retention data is calculated from the selected    */\r\n/* size.                                                                                                        */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_RET_DATA_SIZE    (2048)\r\n//#define CFG_RET_DATA_SIZE    (2200)\r\n#define CFG_RET_DATA_SIZE    (2048)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum uninitialized retained data required by the application.                                             */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_UNINIT_SIZE (0)\r\n\r\n/****************************************************************************************************************/\r\n/* The Keil scatter file may be provided by the user. If the user provides his own scatter file, the system has */\r\n/* to be aware which RAM blocks has to retain. The 3rd RAM block is always retained, since it contains the ROM  */\r\n/* data.                                                                                                        */\r\n/*     - CFG_RETAIN_RAM_1_BLOCK: if defined, the 1st RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_2_BLOCK: if defined, the 2nd RAM block must be retained.                                */\r\n/*                                                                                                              */\r\n/* If the CFG_CUSTOM_SCATTER_FILE flag is undefined, the system knows which blocks to retain based on the       */\r\n/* default SDK scatter file.                                                                                    */\r\n/****************************************************************************************************************/\r\n#undef CFG_CUSTOM_SCATTER_FILE\r\n#ifdef CFG_CUSTOM_SCATTER_FILE\r\n    #define CFG_RETAIN_RAM_1_BLOCK\r\n    #define CFG_RETAIN_RAM_2_BLOCK\r\n#endif\r\n\r\n/****************************************************************************************************************/\r\n/* Code location selection.                                                                                     */\r\n/*     - CFG_CODE_LOCATION_EXT: Code is loaded from SPI flash / I2C EEPROM / UART                               */\r\n/*     - CFG_CODE_LOCATION_OTP: Code is burned in the OTP                                                       */\r\n/* The above options are mutually exclusive and exactly one of them must be enabled.                            */\r\n/****************************************************************************************************************/\r\n#define CFG_CODE_LOCATION_EXT\r\n#undef CFG_CODE_LOCATION_OTP\r\n\r\n/****************************************************************************************************************/\r\n/* Temperature range selection.                                                                                 */\r\n/* - CFG_HIGH_TEMPERATURE:         Device is configured to operate at high temperature range (-40C to +105C).   */\r\n/* - CFG_AMB_TEMPERATURE:          Device is configured to operate at ambient temperature range (-40C to +40C). */\r\n/* - CFG_MID_TEMPERATURE:          Device is configured to operate at mid temperature range (-40C to +60C).     */\r\n/* - CFG_EXT_TEMPERATURE:          Device is configured to operate at ext temperature range (-40C to +85C).     */\r\n/****************************************************************************************************************/\r\n#define CFG_AMB_TEMPERATURE\r\n\r\n/****************************************************************************************************************/\r\n/* Disable quadrature decoder on start up. The quadrature decoder is by default enabled on system power up and  */\r\n/* it may count events. This leads to WKUP_QUADEC_IRQn pending interrupts.                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_DISABLE_QUADEC_ON_START_UP\r\n\r\n#endif\r\n\r\n#endif // _DA1458X_CONFIG_ADVANCED_H_\r\n\n\n/**\r\n ****************************************************************************************\r\n *\r\n * @file user_config.h\r\n *\r\n * @brief User configuration file.\r\n *\r\n * Copyright (C) 2015-2020 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _USER_CONFIG_H_\r\n#define _USER_CONFIG_H_\r\n\r\n/*\r\n * INCLUDE FILES\r\n ****************************************************************************************\r\n */\r\n\r\n#include \"app_user_config.h\"\r\n#include \"arch_api.h\"\r\n#include \"app_default_handlers.h\"\r\n#include \"app_adv_data.h\"\r\n#include \"co_bt.h\"\r\n\r\n/*\r\n * DEFINES\r\n ****************************************************************************************\r\n */\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Privacy / Addressing configuration\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n/*************************************************************************\r\n * Privacy Capabilities and address configuration of local device:\r\n * - APP_CFG_ADDR_PUB               No Privacy, Public BDA\r\n * - APP_CFG_ADDR_STATIC            No Privacy, Random Static BDA\r\n * - APP_CFG_HOST_PRIV_RPA          Host Privacy, RPA, Public Identity\r\n * - APP_CFG_HOST_PRIV_NRPA         Host Privacy, NRPA (non-connectable ONLY)\r\n * - APP_CFG_CNTL_PRIV_RPA_PUB      Controller Privacy, RPA or PUB, Public Identity\r\n * - APP_CFG_CNTL_PRIV_RPA_RAND     Controller Privacy, RPA, Public Identity\r\n *\r\n * Select only one option for privacy / addressing configuration.\r\n **************************************************************************\r\n */\r\n#define USER_CFG_ADDRESS_MODE       APP_CFG_ADDR_PUB\r\n\r\n/*************************************************************************\r\n * Controller Privacy Mode:\r\n * - APP_CFG_CNTL_PRIV_MODE_NETWORK Controler Privacy Network mode (default)\r\n * - APP_CFG_CNTL_PRIV_MODE_DEVICE  Controler Privacy Device mode\r\n *\r\n * Select only one option for controller privacy mode configuration.\r\n **************************************************************************\r\n */\r\n#define USER_CFG_CNTL_PRIV_MODE     APP_CFG_CNTL_PRIV_MODE_NETWORK\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Security configuration\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n/************************************************************\r\n * Device IO Capability (@see gap_io_cap)\r\n *\r\n * - GAP_IO_CAP_DISPLAY_ONLY          Display Only\r\n * - GAP_IO_CAP_DISPLAY_YES_NO        Display Yes No\r\n * - GAP_IO_CAP_KB_ONLY               Keyboard Only\r\n * - GAP_IO_CAP_NO_INPUT_NO_OUTPUT    No Input No Output\r\n * - GAP_IO_CAP_KB_DISPLAY            Keyboard Display\r\n *\r\n * Select only one option.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_IO_CAP    GAP_IO_CAP_DISPLAY_YES_NO\r\n\r\n/************************************************************\r\n * OOB information (@see gap_oob)\r\n *\r\n * - GAP_OOB_AUTH_DATA_NOT_PRESENT    OOB Data not present\r\n * - GAP_OOB_AUTH_DATA_PRESENT        OOB data present\r\n *\r\n * Select only one option.\r\n * Note: OOB is only supported with Legacy Pairing\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_OOB       GAP_OOB_AUTH_DATA_NOT_PRESENT\r\n\r\n/************************************************************\r\n * Authentication Requirements (@see gap_auth_mask)\r\n *\r\n * - GAP_AUTH_NONE      None\r\n * - GAP_AUTH_BOND      Bond\r\n * - GAP_AUTH_MITM      MITM\r\n * - GAP_AUTH_SEC       Secure Connection\r\n * - GAP_AUTH_KEY       Keypress Notification (Not Supported)\r\n *\r\n * Any combination of the above.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_AUTH_REQ  (GAP_AUTH_BOND | GAP_AUTH_MITM | GAP_AUTH_SEC)\r\n\r\n/************************************************************\r\n * Encryption Max key size (7 to 16) - USER_CFG_FEAT_KEY_SIZE\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_KEY_SIZE  KEY_LEN\r\n\r\n/************************************************************\r\n * Device security requirements (@see gap_sec_req)\r\n *\r\n * - GAP_NO_SEC                 No security (no authentication and encryption)\r\n * - GAP_SEC1_NOAUTH_PAIR_ENC   Unauthenticated pairing with encryption\r\n * - GAP_SEC1_AUTH_PAIR_ENC     Authenticated pairing with encryption\r\n * - GAP_SEC1_SEC_PAIR_ENC      Authenticated LE Secure Connections pairing with encryption\r\n * - GAP_SEC2_NOAUTH_DATA_SGN   Unauthenticated pairing with data signing\r\n * - GAP_SEC2_AUTH_DATA_SGN     Authentication pairing with data signing\r\n *\r\n * Select only one option.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_SEC_REQ   GAP_SEC1_NOAUTH_PAIR_ENC\r\n\r\n/**************************************************************************************\r\n * Initiator key distribution (@see gap_kdist)\r\n *\r\n * - GAP_KDIST_NONE             No Keys to distribute\r\n * - GAP_KDIST_ENCKEY           LTK (Encryption key) in distribution\r\n * - GAP_KDIST_IDKEY            IRK (ID key)in distribution\r\n * - GAP_KDIST_SIGNKEY          CSRK (Signature key) in distribution\r\n *\r\n * Any combination of the above\r\n **************************************************************************************\r\n */\r\n#define USER_CFG_FEAT_INIT_KDIST (GAP_KDIST_ENCKEY | GAP_KDIST_IDKEY | GAP_KDIST_SIGNKEY)\r\n\r\n/**************************************************************************************\r\n * Responder key distribution (@see gap_kdist)\r\n *\r\n * - GAP_KDIST_NONE             No Keys to distribute\r\n * - GAP_KDIST_ENCKEY           LTK (Encryption key) in distribution\r\n * - GAP_KDIST_IDKEY            IRK (ID key)in distribution\r\n * - GAP_KDIST_SIGNKEY          CSRK (Signature key) in distribution\r\n *\r\n * Any combination of the above\r\n **************************************************************************************\r\n */\r\n#define USER_CFG_FEAT_RESP_KDIST (GAP_KDIST_ENCKEY | GAP_KDIST_IDKEY | GAP_KDIST_SIGNKEY)\r\n\r\n/*\r\n * VARIABLES\r\n ****************************************************************************************\r\n */\r\n\r\n/******************************************\r\n * Default sleep mode. Possible values are:\r\n *\r\n * - ARCH_SLEEP_OFF\r\n * - ARCH_EXT_SLEEP_ON\r\n * - ARCH_EXT_SLEEP_OTP_COPY_ON\r\n *\r\n ******************************************\r\n */\r\n//BUZZ static const sleep_state_t app_default_sleep_mode = ARCH_SLEEP_OFF;\r\nstatic const sleep_state_t app_default_sleep_mode = ARCH_EXT_SLEEP_ON;\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Advertising configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct advertise_configuration user_adv_conf = {\r\n\r\n    .addr_src = APP_CFG_ADDR_SRC(USER_CFG_ADDRESS_MODE),\r\n\r\n    /// Minimum interval for advertising\r\n    .intv_min = MS_TO_BLESLOTS(687.5),                    // 687.5ms\r\n\r\n    /// Maximum interval for advertising\r\n    .intv_max = MS_TO_BLESLOTS(687.5),                    // 687.5ms\r\n\r\n    /**\r\n     *  Advertising channels map:\r\n     * - ADV_CHNL_37_EN:   Advertising channel map for channel 37.\r\n     * - ADV_CHNL_38_EN:   Advertising channel map for channel 38.\r\n     * - ADV_CHNL_39_EN:   Advertising channel map for channel 39.\r\n     * - ADV_ALL_CHNLS_EN: Advertising channel map for channel 37, 38 and 39.\r\n     */\r\n    .channel_map = ADV_ALL_CHNLS_EN,\r\n\r\n    /*************************\r\n     * Advertising information\r\n     *************************\r\n     */\r\n\r\n    /// Host information advertising data (GAPM_ADV_NON_CONN and GAPM_ADV_UNDIRECT)\r\n    /// Advertising mode :\r\n    /// - GAP_NON_DISCOVERABLE: Non discoverable mode\r\n    /// - GAP_GEN_DISCOVERABLE: General discoverable mode\r\n    /// - GAP_LIM_DISCOVERABLE: Limited discoverable mode\r\n    /// - GAP_BROADCASTER_MODE: Broadcaster mode\r\n    .mode = GAP_GEN_DISCOVERABLE,\r\n\r\n    /// Host information advertising data (GAPM_ADV_NON_CONN and GAPM_ADV_UNDIRECT)\r\n    /// Advertising filter policy:\r\n    /// - ADV_ALLOW_SCAN_ANY_CON_ANY: Allow both scan and connection requests from anyone\r\n    /// - ADV_ALLOW_SCAN_ANY_CON_WLST: Allow both scan req from anyone and connection req from\r\n    ///                                White List devices only\r\n    .adv_filt_policy = ADV_ALLOW_SCAN_ANY_CON_ANY,\r\n\r\n    /// Address of peer device\r\n    /// NOTE: Meant for directed advertising (ADV_DIRECT_IND)\r\n    .peer_addr = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6},\r\n\r\n    /// Address type of peer device (0=public/1=random)\r\n    /// NOTE: Meant for directed advertising (ADV_DIRECT_IND)\r\n    .peer_addr_type = 0,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Advertising or scan response data for the following cases:\r\n *\r\n * - ADV_IND: Connectable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 28 bytes.\r\n *    - The Flags data type are written by the related ROM function, hence the user shall\r\n *      not include them in the advertising data. The related ROM function adds 3 bytes in\r\n *      the start of the advertising data that are to be transmitted over the air.\r\n *    - The maximum length of the user defined response data shall be 31 bytes.\r\n *\r\n * - ADV_NONCONN_IND: Non-connectable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 31 bytes.\r\n *    - The Flags data type may be omitted, hence the user can use all the 31 bytes for\r\n *      data.\r\n *    - The scan response data shall be empty.\r\n *\r\n * - ADV_SCAN_IND: Scannable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 31 bytes.\r\n *    - The Flags data type may be omitted, hence the user can use all the 31 bytes for\r\n *      data.\r\n *    - The maximum length of the user defined response data shall be 31 bytes.\r\n ****************************************************************************************\r\n */\r\n/// Advertising data\r\n/*\r\n#define USER_ADVERTISE_DATA         (\"\\x03\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_16BIT_SERVICE_IDS\\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tADV_UUID_DEVICE_INFORMATION_SERVICE\\\r\n                                    \"\\x11\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_128BIT_SERVICE_IDS\\\r\n                                    \"\\x59\\x5A\\x08\\xE4\\x86\\x2A\\x9E\\x8F\\xE9\\x11\\xBC\\x7C\\x98\\x43\\x42\\x18\")\r\n*/\r\n\r\n#define USER_ADVERTISE_DATA         (\"\\x03\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_16BIT_SERVICE_IDS\\\r\n                                    ADV_UUID_SUOTAR_SERVICE)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n/// Advertising data length - maximum 28 bytes, 3 bytes are reserved to set\r\n#define USER_ADVERTISE_DATA_LEN               (sizeof(USER_ADVERTISE_DATA)-1)\r\n\r\n/// Scan response data\r\n#define USER_ADVERTISE_SCAN_RESPONSE_DATA \"\"\r\n\r\n/// Scan response data length- maximum 31 bytes\r\n#define USER_ADVERTISE_SCAN_RESPONSE_DATA_LEN (sizeof(USER_ADVERTISE_SCAN_RESPONSE_DATA)-1)\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Device name.\r\n *\r\n * - If there is space left in the advertising or scan response data the device name is\r\n *   copied there. The device name can be anytime read by a connected peer, if the\r\n *   application supports it.\r\n * - The Bluetooth device name can be up to 248 bytes.\r\n *\r\n ****************************************************************************************\r\n */\r\n/// Device name\r\n#define USER_DEVICE_NAME        \"Black Box\"\r\n\r\n/// Device name length\r\n#define USER_DEVICE_NAME_LEN    (sizeof(USER_DEVICE_NAME)-1)\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * GAPM configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct gapm_configuration user_gapm_conf = {\r\n    /// Device Role: Central, Peripheral, Observer, Broadcaster or All roles. (@see enum gap_role)\r\n    .role = GAP_ROLE_PERIPHERAL,\r\n\r\n    /// Maximal MTU. Shall be set to 23 if Legacy Pairing is used, 65 if Secure Connection is used,\r\n    /// more if required by the application\r\n//buzz    .max_mtu = 23,\r\n    .max_mtu = 65,\r\n\r\n    /// Device Address Type\r\n    .addr_type = APP_CFG_ADDR_TYPE(USER_CFG_ADDRESS_MODE),\r\n    /// Duration before regenerating the Random Private Address when privacy is enabled\r\n    .renew_dur = 15000,    // 15000 * 10ms = 150s is the minimum value\r\n\r\n    /***********************\r\n     * Privacy configuration\r\n     ***********************\r\n     */\r\n\r\n    /// Random Static address\r\n    // NOTE: The address shall comply with the following requirements:\r\n    // - the two most significant bits of the address shall be equal to 1,\r\n    // - all the remaining bits of the address shall NOT be equal to 1,\r\n    // - all the remaining bits of the address shall NOT be equal to 0.\r\n    // In case the {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} null address is used, a\r\n    // random static address will be automatically generated.\r\n    .addr = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\r\n\r\n    /// Device IRK used for Resolvable Private Address generation (LSB first)\r\n    .irk = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},\r\n\r\n    /****************************\r\n     * ATT database configuration\r\n     ****************************\r\n     */\r\n\r\n    /// Attribute database configuration (@see enum gapm_att_cfg_flag)\r\n    ///    7     6    5     4     3    2    1    0\r\n    /// +-----+-----+----+-----+-----+----+----+----+\r\n    /// | DBG | RFU | SC | PCP | APP_PERM |NAME_PERM|\r\n    /// +-----+-----+----+-----+-----+----+----+----+\r\n    /// - Bit [0-1]: Device Name write permission requirements for peer device (@see device_name_write_perm)\r\n    /// - Bit [2-3]: Device Appearance write permission requirements for peer device (@see device_appearance_write_perm)\r\n    /// - Bit [4]  : Slave Preferred Connection Parameters present\r\n    /// - Bit [5]  : Service change feature present in GATT attribute database.\r\n    /// - Bit [6]  : Reserved\r\n    /// - Bit [7]  : Enable Debug Mode\r\n    .att_cfg = GAPM_MASK_ATT_SVC_CHG_EN,\r\n\r\n    /// GAP service start handle\r\n    .gap_start_hdl = 0,\r\n\r\n    /// GATT service start handle\r\n    .gatt_start_hdl = 0,\r\n\r\n    /**************************************************\r\n     * Data packet length extension configuration (4.2)\r\n     **************************************************\r\n     */\r\n\r\n    /// Maximal MPS\r\n    .max_mps = 0,\r\n\r\n    /// Maximal Tx octets (connInitialMaxTxOctets value, as defined in 4.2 Specification)\r\n    .max_txoctets = 251,\r\n\r\n    /// Maximal Tx time (connInitialMaxTxTime value, as defined in 4.2 Specification)\r\n    .max_txtime = 2120,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Parameter update configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct connection_param_configuration user_connection_param_conf = {\r\n    /// Connection interval minimum measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .intv_min = MS_TO_DOUBLESLOTS(10),\r\n\r\n    /// Connection interval maximum measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .intv_max = MS_TO_DOUBLESLOTS(20),\r\n\r\n    /// Latency measured in connection events\r\n    .latency = 0,\r\n\r\n    /// Supervision timeout measured in timer units (10 ms)\r\n    /// use the macro MS_TO_TIMERUNITS to convert from milliseconds (ms) to timer units\r\n    .time_out = MS_TO_TIMERUNITS(1250),\r\n\r\n    /// Minimum Connection Event Duration measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .ce_len_min = MS_TO_DOUBLESLOTS(0),\r\n\r\n    /// Maximum Connection Event Duration measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .ce_len_max = MS_TO_DOUBLESLOTS(0),\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Default handlers configuration (applies only for @app_default_handlers.c)\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct default_handlers_configuration  user_default_hnd_conf = {\r\n    // Configure the advertise operation used by the default handlers\r\n    // Possible values:\r\n    //  - DEF_ADV_FOREVER\r\n    //  - DEF_ADV_WITH_TIMEOUT\r\n    .adv_scenario = DEF_ADV_FOREVER,\r\n\r\n    // Configure the advertise period in case of DEF_ADV_WITH_TIMEOUT.\r\n    // It is measured in timer units (3 min). Use MS_TO_TIMERUNITS macro to convert\r\n    // from milliseconds (ms) to timer units.\r\n    .advertise_period = MS_TO_TIMERUNITS(180000),\r\n\r\n    // Configure the security start operation of the default handlers\r\n    // if the security is enabled (CFG_APP_SECURITY)\r\n    // Possible values:\r\n    //  - DEF_SEC_REQ_NEVER\r\n    //  - DEF_SEC_REQ_ON_CONNECT\r\n    .security_request_scenario = DEF_SEC_REQ_NEVER\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Central configuration (not used by current example)\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct central_configuration user_central_conf = {\r\n    /// GAPM requested operation:\r\n    /// - GAPM_CONNECTION_DIRECT: Direct connection operation\r\n    /// - GAPM_CONNECTION_AUTO: Automatic connection operation\r\n    /// - GAPM_CONNECTION_SELECTIVE: Selective connection operation\r\n    /// - GAPM_CONNECTION_NAME_REQUEST: Name Request operation (requires to start a direct\r\n    ///   connection)\r\n    .code = GAPM_CONNECTION_DIRECT,\r\n\r\n    /// Own BD address source of the device:\r\n    .addr_src = APP_CFG_ADDR_SRC(USER_CFG_ADDRESS_MODE),\r\n\r\n    /// Scan interval\r\n    .scan_interval = 0x180,\r\n\r\n    /// Scan window size\r\n    .scan_window = 0x160,\r\n\r\n     /// Minimum of connection interval\r\n    .con_intv_min = 100,\r\n\r\n    /// Maximum of connection interval\r\n    .con_intv_max = 100,\r\n\r\n    /// Connection latency\r\n    .con_latency = 0,\r\n\r\n    /// Link supervision timeout\r\n    .superv_to = 0x1F4,\r\n\r\n     /// Minimum CE length\r\n    .ce_len_min = 0,\r\n\r\n    /// Maximum CE length\r\n    .ce_len_max = 0x5,\r\n\r\n    /**************************************************************************************\r\n     * Peer device information (maximum number of peers = 8)\r\n     **************************************************************************************\r\n     */\r\n\r\n    /// BD Address of device\r\n    .peer_addr_0 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_0_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_1 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_1_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_2_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_3_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_4 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_4_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_5 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_5_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_6 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_6_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_7 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_7_type = 0,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Security related configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct security_configuration user_security_conf = {\r\n    // IO Capabilities\r\n    #if defined (USER_CFG_FEAT_IO_CAP)\r\n    .iocap          = USER_CFG_FEAT_IO_CAP,\r\n    #else\r\n    .iocap          = GAP_IO_CAP_NO_INPUT_NO_OUTPUT,\r\n    #endif\r\n\r\n    // OOB Capabilities\r\n    #if defined (USER_CFG_FEAT_OOB)\r\n    .oob            = USER_CFG_FEAT_OOB,\r\n    #else\r\n    .oob            = GAP_OOB_AUTH_DATA_NOT_PRESENT,\r\n    #endif\r\n\r\n    // Authentication Requirements\r\n    #if defined (USER_CFG_FEAT_AUTH_REQ)\r\n    .auth           = USER_CFG_FEAT_AUTH_REQ,\r\n    #else\r\n    .auth           = GAP_AUTH_NONE,\r\n    #endif\r\n\r\n    // LTK size\r\n    #if defined (USER_CFG_FEAT_KEY_SIZE)\r\n    .key_size       = USER_CFG_FEAT_KEY_SIZE,\r\n    #else\r\n    .key_size       = KEY_LEN,\r\n    #endif\r\n\r\n    // Initiator key distribution\r\n    #if defined (USER_CFG_FEAT_INIT_KDIST)\r\n    .ikey_dist      = USER_CFG_FEAT_INIT_KDIST,\r\n    #else\r\n    .ikey_dist      = GAP_KDIST_NONE,\r\n    #endif\r\n\r\n    // Responder key distribution\r\n    #if defined (USER_CFG_FEAT_RESP_KDIST)\r\n    .rkey_dist      = USER_CFG_FEAT_RESP_KDIST,\r\n    #else\r\n    .rkey_dist      = GAP_KDIST_ENCKEY,\r\n    #endif\r\n\r\n    // Security requirements (minimum security level)\r\n    #if defined (USER_CFG_FEAT_SEC_REQ)\r\n    .sec_req        = USER_CFG_FEAT_SEC_REQ,\r\n    #else\r\n    .sec_req        = GAP_NO_SEC,\r\n    #endif\r\n};\r\n\r\n#endif // _USER_CONFIG_H_\r\n\n\n\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply and the clarifications.When you have enabled Extended Sleep mode, the Watchdog timer is being handled automatically.When you have disabled Extended Sleep mode and there is no Advertising/Scanning (general activity of the BLE core) you will have to handle the Watchdog manually.You can use the following APIs:\r\n/**\r\n ****************************************************************************************\r\n * @brief     Watchdog resume.\r\n * About: Start the Watchdog\r\n ****************************************************************************************\r\n */\r\n__STATIC_INLINE void  wdg_resume(void)\r\n{\r\n#if (USE_WDOG)\r\n    // Start WDOG\r\n    SetWord16(RESET_FREEZE_REG, FRZ_WDOG);\r\n#endif\r\n}\r\n\r\n/**\r\n****************************************************************************************\r\n* @brief     Freeze Watchdog. Call wdg_resume() to resume operation.\r\n* About: Freeze the Watchdog\r\n****************************************************************************************\r\n*/\r\n__STATIC_INLINE void  wdg_freeze(void)\r\n{\r\n    // Freeze WDOG\r\n    SetWord16(SET_FREEZE_REG, FRZ_WDOG);\r\n}\r\n\r\n/**\r\n ****************************************************************************************\r\n * @brief     Watchdog reload.\r\n * @param[in] period measured in 10.24ms units.\r\n * About: Load the default value and resume the watchdog\r\n ****************************************************************************************\r\n */\r\n__STATIC_INLINE void  wdg_reload(const int period)\r\n{\r\n#if (USE_WDOG)\r\n    // WATCHDOG_DEFAULT_PERIOD * 10.24ms\r\n    SetWord16(WATCHDOG_REG, WATCHDOG_DEFAULT_PERIOD);\r\n#endif\r\n}\r\nWith Heap increased are you still witnessing the same behavior? Did you try to increase it further?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\u00a0\nIn the last testing heap size was defined as --->\u00a0#define DB_HEAP_SZ\u00a0 2048. Then After 15 minutes the device rebooted. I mean crashed after 15 min\n\u00a0\nAfter you suggested again,\u00a0I changed\u00a0the heap size --->\u00a0\u00a0#define DB_HEAP_SZ\u00a0 4096. Then\u00a0After 30 minutes the device rebooted. I mean crashed after 30 min\n\u00a0\nYou mean to say to call the WATCHDOG ? Where should I call these\u00a0APIs? please suggest it to me.\n\u00a0\nNote:- In this my custom app i am using Connectable, Disconnectable, app_easy_timer, iBeacon, Battery reading, Passkey security, SUOTA profiles enabled.\n\nProfiles enabled:\n\u00a0\n#define CFG_PRF_DISS#define CFG_PRF_CUST1#define CFG_PRF_SUOTAR\n\nModules Enabled:\n\n#define EXCLUDE_DLG_GAP (0)#define EXCLUDE_DLG_TIMER (0)#define EXCLUDE_DLG_MSG (0)#define EXCLUDE_DLG_SEC (0)#define EXCLUDE_DLG_DISS (0)#define EXCLUDE_DLG_PROXR (1)#define EXCLUDE_DLG_BASS (1)#define EXCLUDE_DLG_FINDL (1)#define EXCLUDE_DLG_FINDT (1)#define EXCLUDE_DLG_SUOTAR (0)#define EXCLUDE_DLG_CUSTS1 (0)#define EXCLUDE_DLG_CUSTS2 (1)\n\nHow to optimize to rectify my issue, please recommend.\n\nMy compilation code as below size:\u00a0\nlinking...Program Size: Code=28776 RO-data=2588 RW-data=20 ZI-data=11372 \n\nThanks,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply.\n\nQuote: After you suggested again,\u00a0I changed\u00a0the heap size --->\u00a0\u00a0#define DB_HEAP_SZ\u00a0 4096. Then\u00a0After 30 minutes the device rebooted. I mean crashed after 30 min\n\nThis means that the device was actually crashing due to heap exhaustion.Somewhere in side your code workflow there should be an issue that prevents the scheduler from freeing this memory space.\n\nQuote: You mean to say to call the WATCHDOG ? Where should I call these\u00a0APIs? please suggest it to me.\n\nWhat I mean by handling WatchDog:1) Include the arch_wdg.h file in your project2) When you disable Extended Sleep mode, then use the\u00a0wdg_freeze API, and before you re-enable the Extended Sleep mode, then use the\u00a0wdg_resume API.I still need to understand if you are utilizing Extended or Deep Sleep mode.If you could share the whole project in a zip file it would be easier for us to go through it and try to debug it on our side.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\nThanks\u00a0for your\u00a0email.\n\n\nDue to the large size, I uploaded the zip file from the link below please download it.\n\n\nRegards,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for providing the project.I am not able to recreate the issue on my side.\u00a0I have left the project running for over 30 minutes on the Dev Kit Pro and I have connected multiple times via the SmartBond mobile application.After disconnect the device does not go into any Sleep mode or non-connectable advertising.Could you please share a high level explanation of how this project should work?i.e.\u00a01) Advertise with Extended Sleep mode2) Connect3) Pair with LE Secure Connections4) Disconnect5) Start advertising with non-connectable mode and Extended Sleep6)etc.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\nCan you share your device BT MAC address for sharing the pass key to access the device.\nRegards,\nKumar"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\u00a0\nIam using DA14531, CodeLess\u00a0Version:6.380.14.22.\nMy requirement is to transmit minimum 500 bytes of data in single packet.\nThe problem iam facing is while transmitting data from ble it sending chucks of 176 bytes. This causing a issue in BLE to App\u00a0 communication.\nPls help me in solving this issue.\u00a0\n\nRegards,\u00a0\nLaxmi Narayana.\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: My requirement is to transmit minimum 500 bytes of data in single packet.\nThe problem iam facing is while transmitting data from ble it sending chucks of 176 bytes. This causing a issue in BLE to App\u00a0 communication.\n\nUnfortunately, this is not possible.The maximum supported value of a BLE packet is 251 bytes.\u00a0You can control this via the MTU on the user_config.h file.You can try to send 500 bytes of data, but the L2CAP protocol will break this into 2 separate packets.\u00a0Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV_Renesas,\nThank you for supporting and the suggestions from you helped me lot in learning and in development.\nRegards,\nLaxmi Narayana.\u00a0"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello,\n\nI am facing issue in DA14706 SoC that has been used in my design for BLE operations as well as to run low current applications from the output supply that DA14706 offers.\nI am able to get proper output voltages as mentioned in the datasheet. However, I am unable to load even 1mA current from V18 that has been generated through pin K2. For my application i want to draw maximum 50mA from this output voltage.\nIn the EVK also, i found that the daughterboard only gives 0.2VDC output on this particular K2 Pin.\nAny help in this would be highly appreciated.\nThanks in advance.\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Mohak,Thank you for posting your question online.Let me check on this and I will get back to you as soon as possible.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi,\n\u00a0 \u00a0 \u00a0 I am doing the advertisement one second interval and the advertisement mode is in connectable mode. sometimes when i am scanning the beacons there is no uuid bytes in the advertisement not even the major minor bytes only the length of 10 bytes its changing. but i never stopping the advertisement and starting that time , still its changing automatically .\n\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/1273.normal.PNG : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/2806.type_5F00_changing.PNG\n\nplease check is something wrong in this.\n\nThanks,\nSowmiya"
            },
            {
                "role": "Chatbot",
                "content": "Hi Sowmiya,Thank you for posting your question online and apologies for the delay.You have placed this question on the Bluetooth Forum instead of the Bluetooth Low Energy Forum. Let me move this to the BLE Forum.Regarding the change on the advertising data:1) Which BLE device are working with? Is it DA14531?2) Which SDK version are you working with?If you are using DA14531 and the default ibeacon example (from GitRepo) then it is expected the Advertising Data to change. There is an app_easy_timer that expires after 30 seconds that updates the Advertising Data.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "\nQuote: 1) Which BLE device are working with? Is it DA14531?2) Which SDK version are you working with?\n\nda14531 and sdk :\u00a06.0.16.1144\nDEF_ADV_FOREVER\u00a0 i have sets this type and where is that 30 sec timer that updates data ?\nstatic const struct default_handlers_configuration user_default_hnd_conf = { // Configure the advertise operation used by the default handlers // Possible values: // - DEF_ADV_FOREVER // - DEF_ADV_WITH_TIMEOUT .adv_scenario = DEF_ADV_FOREVER,\n// Configure the advertise period in case of DEF_ADV_WITH_TIMEOUT. // It is measured in timer units (3 min). Use MS_TO_TIMERUNITS macro to convert // from milliseconds (ms) to timer units. .advertise_period = MS_TO_TIMERUNITS(180000),\n// Configure the security start operation of the default handlers // if the security is enabled (CFG_APP_SECURITY) // Possible values: // - DEF_SEC_REQ_NEVER // - DEF_SEC_REQ_ON_CONNECT .security_request_scenario = DEF_SEC_REQ_NEVER};"
            },
            {
                "role": "Chatbot",
                "content": "Hi Sowmiya,Thank you for the reply.\n\nQuote: \u00a0One more query from this BLE advertising , can we use the Ibeacon advertisement format with connectable mode ?\nhttps://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/30092/ibeacon-abvertisemt-not-working-in-changing-of-connectable-mode: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/30092/ibeacon-abvertisemt-not-working-in-changing-of-connectable-mode\nThis was the link which i have queried before . is this method is possible now ?\n\nThe beacon format utilizes all 31 bytes of the Advertising data. This is possible only in non-connectable advertising.\u00a0If you use connectable advertising you can only use 28 bytes of the Advertising Data (3 bytes are reserved for Flags), this means that you cannot use the beacon formats with Connectable advertising.You can modify the Manufacturer Specific Data and add 28 bytes of custom information there that will resemble the beacon format.You could also try to add the beacon format on the Scan Response Data but only the Centrals that do Active Scan will be able to read them.\n\nQuote: da14531 and sdk :\u00a06.0.16.1144\nDEF_ADV_FOREVER\u00a0 i have sets this type and where is that 30 sec timer that updates data ?\n\nMost of our SDK6 examples have an app_easy_timer running that will update the Advertising data.The timer callback looks like this:/**\r\n ****************************************************************************************\r\n * @brief Advertisement data update timer callback function.\r\n ****************************************************************************************\r\n*/\r\nstatic void adv_data_update_timer_cb()\r\n{\r\n    // If mnd_data_index has MSB set, manufacturer data is stored in scan response\r\n    uint8_t *mnf_data_storage = (mnf_data_index & 0x80) ? stored_scan_rsp_data : stored_adv_data;\r\n\r\n    // Update manufacturer data\r\n    mnf_data_update();\r\n\r\n    // Update the selected fields of the advertising data (manufacturer data)\r\n    memcpy(mnf_data_storage + (mnf_data_index & 0x7F), &mnf_data, sizeof(struct mnf_specific_data_ad_structure));\r\n\r\n    // Update advertising data on the fly\r\n    app_easy_gap_update_adv_data(stored_adv_data, stored_adv_data_len, stored_scan_rsp_data, stored_scan_rsp_data_len);\r\n\r\n    // Restart timer for the next advertising update\r\n    app_adv_data_update_timer_used = app_easy_timer(APP_ADV_DATA_UPDATE_TO, adv_data_update_timer_cb);\r\n}\r\nPlease check if the\u00a0app_easy_gap_update_adv_data API is being called inside your code.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nI have a doubt regarding codeless\u00a0Version:6.380.14.22.\nHow do I get to know weather my code is acting as central or peripheral?\nIf it is central how can change it to peripheral?\nPls suggest the solution.\u00a0\nRegards,\nLaxmi Narayana.\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: How do I get to know weather my code is acting as central or peripheral?\n\nPlease refer on the UM-B-140 Codeless User Manual: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/index.html, on 9.35 AT+GAPSTATUS: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/atcommands.html#at-gapstatus : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707467245435v1.pngThe AT+GAPSTATUS command can be used to see if you are in Peripheral, Central role or if you are connected to another device.\n\nQuote: If it is central how can change it to peripheral?\n\nPlease refer on 9.33 AT+PERIPHERAL: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/atcommands.html#at-peripheral : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707467317013v2.pngYou cannot issue the AT+PERIPHERAL command if you have established a connection or if any other AT commands are running (i.e. AT+GAPSCAN).Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello Team,\n\nSDK:\u00a0\u00a06.0.16.1144\nModule: DA14531MOD\n\nIs there support for Extended Advertisement as per Bluetooth 5.1? In my application I am using Unconnected broadcast to advertise the data and need to transfer more data hence I am looking for Extended Advertizement support as DA14531\u00a0claims it supports Bluetooth 5.1.\u00a0\nI was\u00a0thinking of implementing chunks of 200 bytes or more if Extended Advertisement supports and in the data packet header(custom) I can indicate the total bytes in the data and whether the complete data has been transferred in that chunk, just like file transfer chunks.\u00a0However, the current 32 bytes with Standard Advertisement is very small in size for chunks as it has to transfer multiple times, hence looking for an Extended Advertisement feature.\nI checked the support questions and I found this question:\u00a0advertising-extensions: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/19987/advertising-extensions. However, it says the\u00a0DA14531 does not support it, is this true even now?\nAnd also the suggestion from the above forum thread \"Except from the advertising data, you can also use the scan response data\" - If I use scan response data, what was the maximum data that it can transfer? Is this still achievable in unconnected mode? I feel Scan Requests\u00a0from\u00a0Central device\u00a0can come only in connected mode. Please correct me if my understanding is not correct.\nThe referred example describes with connected mode, however, I need unconnected mode. Is there any reference example available to send a large amount of data(over 500 bytes, or at least multiple chunks ) over unconnected mode, or any approach that you can suggest?\n\nThanks & Regards\nHarish.\u00a0\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Harish,Thank you for posting your question online.Let me try to answer your questions:\n\nQuote: I checked the support questions and I found this question:\u00a0advertising-extensions: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/19987/advertising-extensions. However, it says the\u00a0DA14531 does not support it, is this true even now?\n\nUnfortunately, the Extended Advertisement (ADV_EXT_IND) is not supported on the DA14531.\u00a0\n\nQuote: And also the suggestion from the above forum thread \"Except from the advertising data, you can also use the scan response data\" - If I use scan response data, what was the maximum data that it can transfer? Is this still achievable in unconnected mode? I feel Scan Requests\u00a0from\u00a0Central device\u00a0can come only in connected mode. Please correct me if my understanding is not correct.\n\nYes, you are correct. In order to receive the Scan Response Data, the central must perform Active Scan and the peripheral device cannot be performing unconnected advertising.\u00a0The Scan Response data have the same size as the Advertising data, 31 bytes, but they do not need the 3 first bytes reserved for Flags. So if you are interested in undirected advertising you can save 28 bytes of data on the Advertising Data and another 31 bytes of information on the Scan Response data.\u00a0Keep in mind that in the Advertising/Scan Response data you will need to save the Device Name as well.\u00a0Please refer on our GitRepo examples for beacons' (unconnected advertising):1)\u00a0BLE_SDK6_examples/connectivity/ibeacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/ibeacon2)\u00a0BLE_SDK6_examples/interfaces/wakeup_hibernation_ext_timer at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/interfaces/wakeup_hibernation_ext_timer3)\u00a0BLE_SDK6_examples/connectivity/simple_beacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/simple_beacon4)\u00a0BLE_SDK6_examples/connectivity/svc_data_beacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/svc_data_beaconKeep in mind that in unconnected advertising you are able to advertise 31 bytes of data but the Device Name can be saved on the Scan Response Data, no other data could be saved on the Scan Response Data.\n\nQuote: The referred example describes with connected mode, however, I need unconnected mode. Is there any reference example available to send a large amount of data(over 500 bytes, or at least multiple chunks ) over unconnected mode, or any approach that you can suggest?\n\nUnfortunately, we do not have any example with unconnected advertising that can support over 500 bytes being transmitted in each advertising packet.\u00a0You will have to send 31 bytes of information on each\u00a0advertising packet.\u00a0You could use undirected advertising in order to use the Scan Response Data as well and you could implement Security on your DA14531 so no central will be able to connect.\u00a0 This way you will be able to send 28+31 (-Device Name bytes) for your advertising packets.Kind Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV_Renesas,\n\nQuote: Unfortunately, the Extended Advertisement (ADV_EXT_IND) is not supported on the DA14531.\u00a0\n\n\nThank you for confirming. Is this limitation by SDK for the software side or the DA14531 Hardware side itself?\nIs\u00a0this feature on the roadmap and any timeline for when this might get supported by SDK?\u00a0\u00a0\n\nThanks,\nHarish\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Harish,Thank you for the reply.I will have to check on this internally and I will get back to you as soon as possible.Kind Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Ov,\nI also have the same doubt,\u00a0 Any update on this.\nRegards,\nLaxmi Narayana\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,The DA14531 does not and will not support the Extended Advertisement feature.The Extended Advertisement feature will be supported in our next BLE SoCs. Unfortunately, there is not an official timeline I could share on that.\u00a0Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi,\nI'm trying to compile an example project (simple_button) from BLE_SDK6_examples (github.com/dialog-semiconductor/).\nI have already the SDK installed and I have executed the python script as suggested (python dlg_make_keil5_env_v2.py -sdkpath \u201c<path to your sdk repository>\u201d).\nWhen I try to compile the project it says the following error:\nRebuild started: Project: simple_button*** Using Compiler 'V6.21', folder: 'C:\\Keil_v5\\ARM\\ARMCLANG\\Bin'Rebuild target 'Simple_Button_531'compiling exceptions.c...assembling startup_DA14531.s...compiling uart_utils.c...compiling systick.c...compiling system_DA14531.c...compiling user_periph_setup.c...compiling syscntl.c...compiling main.c...compiling otp_cs.c...compiling gpio.c...compiling hw_otpc_531.c...compiling uart.c...compiling arch_system.c...linking....\\out_DA14531\\Objects\\simple_button_531.axf: Error: L6218E: Undefined symbol arch_asm_delay_us (referred from uart.o).Not enough information to list image symbols.Not enough information to list load addresses in the image map.Finished: 2 information, 0 warning and 1 error messages.\".\\out_DA14531\\Objects\\simple_button_531.axf\" - 1 Error(s), 0 Warning(s).Target not created.Build Time Elapsed: 00:00:01\n\nI don't know what to do to remove this error.\nCan someone help me?\nThanks.\nBest regards"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javi,Thank you for posting your question online.The Git examples have been ported to SDK v6.0.18 and later.\u00a0Which SDK version are you trying to use?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "SDK\u00a0v6.0.20.1338"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javi,Thanks for the clarification.In order to compile our GitHub Examples on the SDK v6.0.20 you will need to follow the steps below:1) Download the example folder file and place it inside the\u00a0following path: ...\\6.0.20.1338\\projects\\target_apps\\ble_examples2) Use the Python script provided on our GitRepo to fix all the SDK paths to your PC3) Open the Project in Keil, and make sure to include the system_library files in the sdk_arch folder. : https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/pastedimage1706271771797v1.pngYou will only need to include the system_library_531.c file for the DA14531 SoC.or DA14531MOD.In order to do that, right click on sdk_arch folder and select \"Add Existing Files to Group 'sdk_arch' \" : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1706271829167v2.pngNavigate on the following path to find the system_library_531.c file: ...\\6.0.20.1338\\sdk\\platform\\system_library\\src\\DA145314) Save and compile the projectBest Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi,\nI have successfully compiled the project with 0 Errors.\nI'm trying to Debug but it doesn't find the JLink connected:\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707397346971v1.png\nI have also tried loading the .hex file with SmartBond but it doesn't find the JLink.\n : https://community.renesas.com/resized-image/__size/1126x338/__key/communityserver-discussions-components-files/297/pastedimage1707397394035v2.png\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707401186995v1.png\nWindows recognizes the JLink:\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707400706074v3.png\n\nThanks.\nRegards,\nJavier"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.From the Windows Manager you have shared I would guess that you have the USB DEV Kit.If I am mistaken, please correct me.\u00a0Are you sure that you have the correct DIP Switch configuration?Please refer on UM-B-125: https://www.renesas.com/us/en/document/mat/um-b-125-user-manual-da14531-usb-development-kit-hardware: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707402586368v1.pngIf the DIP Switch Configuration is correct, I would guess that there is a pre-loaded FW inside the Dev Kit that has disabled the SWD interface.\u00a0This can happen if you are in Sleep mode and cannot wake-up or if you explicitly remapped the SWD GPIOs.If this is the case, then you will need to use 1-Wire UART Configuration to access and erase the SPI Flash.In order to do that, you will have to use the following DIP Switch Configuration:DIP Switch [1 to 5]: ONDIP Switch [6 to 10]: OFFDIP Switch [11 to 12]: ONOn SmartSnippets Toolbox select DA14531 and the UART COM: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155081021v1.pngGo select the 1-Wire UART option on the Configurator tab: : https://community.renesas.com/resized-image/__size/1096x630/__key/communityserver-discussions-components-files/297/pastedimage1707155116118v2.pngGo to the Programmer tab--> Flash Code--> ConnectYou will be prompted on the Log window to trigger the Reset in order to successfully connect via 1-Wire UART.\u00a0After that you can Read and Erase the SPI Flash and try again to download your FW.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "I'm using the\u00a0Infineon XMC 2Go board to program the DA14531"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.I have no experience with the board you mentioned and I cannot provide support on that because it is from a 3rd party company.But I can give some insights:The DA14531 can be programmed either by the SWD interface or via 1-Wire UART.\u00a0The 1-Wire UART programming can be done with any USB to Serial Module (FTDI cable etc.) via our SmartSnippets Toolbox.\u00a0In your case now, you have a DA14531 SoC or DA14531MOD?Is it a custom board or just the IC?Could you please share a simple schematic so we can get a better understanding?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi,\nThanks for the fast reply.\nI'm trying to follow this guide:\nEasy, Cost-Effective Bluetooth LE (BLE) with Dialog DA14531MOD - element14 Community: https://community.element14.com/technologies/open-source-hardware/b/blog/posts/easy-cost-effective-bluetooth-le-ble-with-dialog-da14531mod\n\nI'm using the chip with an LED soldered, I want to do a simple blinky LED test and build something more complex from that.\n\nThanks again.\nB.R.\nJavier"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.From my understanding you are working with the DA14531MOD.Please refer here:\u00a0DA14531 Tiny module - Bluetooth Low Energy - Wireless Connectivity - Renesas Engineering Community: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/32447/da14531-tiny-moduleMasCreyt wanted to download the Codeless Firmware on his board to test AT commands. You can follow the same procedure to download your firmware into the DA14531MOD.Unfortunately, I cannot provide you support for the specific Debugging board you have since it is not from Renesas or a partner of Renesas.\u00a0I can see on the link you shared some comments as well, another user which I believe is also part of this Forum, also faced some issues. Maybe his answer could be helpful to you.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello Forum, and Renesas support. I thought that answers to the following question might be useful for others as well, so I'll ask on this forum.\nI have some production focused questions pertaining to da14531mod based devices.\nI am trying to find a workflow where i can produce a sticker with a unique number which i will use, in the device, as a predetermined passkey. The device is only equipped with a button, having no display of its own. I realise that i either have to read the unique number from the OTP memory and use a portion of that as the passkey or input a unique number on the OTP/SPI-Flash when programming the device. The device runns a GATT server implemented with SDK6.\n\nIs there software/hardware available that enables programming firmware onto the da14531mod device SPI Flash whereafter it either:\n\nReads the unique number from the OTP at adds it to a file (to be used for printing labels as well as for production documentation)or\nWrites a unique number from a prepared list of numbers in a file, editing the file to show which numbers have been used/printed?\n\n\nAre there other reccommended ways to setup a workflow where a worker has to label every device with unique labels? reliabilly keeping track of it all.\n\n-conversing with one of our costumers moved the goalpost. I will try to accommedate this in a way that dosn't inconviene the production staff too much."
            },
            {
                "role": "Chatbot",
                "content": "Hi CLK,Thank you for posting your question online.Let me check on this and I will get back to you with a complete response to your questions.In the meantime\u00a0let me just help you with the USB Dev Kit and OTP:\n\nQuote: When i try to read OTP memory, using the usb dev kit and the smartsnippets toolbox, i get these error messages. By now i have a few of the dev kits and none of them succeed, even an unmodded one talking to its onboard DA14531 fails. I am clearly doing something wrong, CRC dosn't match -.-?\n\nI believe that you have not set the DIP Switch configuration correctly on the USB Dev Kit.Please use the following configuration:DIP Switch [1 to 5]: ONDIP Switch [6 to 10]: OFFDIP Switch [11 to 12]: ONOn SmartSnippets Toolbox select DA14531 and the UART COM: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155081021v1.pngGo select the 1-Wire UART option on the Configurator tab: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155116118v2.pngThen go on Programmer-->OTP and press Connect. Trigger the RST button when you are prompted by the Log Window.On my side I was able to connect and read the OTP: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155158254v3.pngBest Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": " : https://community.renesas.com/resized-image/__size/1304x278/__key/communityserver-discussions-components-files/297/pastedimage1707146637349v3.pngWhen i try to read OTP memory, using the usb dev kit and the smartsnippets toolbox, i get these error messages. By now i have a few of the dev kits and none of them succeed, even an unmodded one talking to its onboard DA14531 fails. I am clearly doing something wrong, CRC dosn't match -.-?"
            },
            {
                "role": "Chatbot",
                "content": "I have now tried to correlate the OTP header and the data Matrix: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707212958432v1.jpegOPT Header:0x07F87FC0\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FC8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FD0\u00a0\u00a0 \u00a0AA FF 00 00 FF FF FF FF \u00a0\u00a0 \u00a0\uffaa\u00a0 0x07F87FD8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FE0\u00a0\u00a0 \u00a000 00 00 00 07 A4 01 00 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 \uffa4 0x07F87FE8\u00a0\u00a0 \u00a077 0D BA 14 FF FF FF FF \u00a0\u00a0 \u00a0w\uffba0x07F87FF0\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FF8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF Data matrix barcode:S23142904R05Possible Dec conversion of timestamp\u00a0 77\u00a0\u00a0 0D\u00a0\u00a0 BA\u00a0\u00a0 14\u00a0119\u00a0\u00a0 13\u00a0 186\u00a0\u00a0 200707 0013 1110 0104I see no corrolation. I don't understand the timestamp syntax and i suspect that the timestamp in the OTP is from manufactureing the chip where the da14531mod module has a different timestamp worked into the datamatrix barcode. Another solution seems to be warranted."
            },
            {
                "role": "User",
                "content": "Hi CLK,Apologies for the delay.\n\nQuote: I am trying to find a workflow where i can produce a sticker with a unique number which i will use, in the device, as a predetermined passkey. The device is only equipped with a button, having no display of its own. I realise that i either have to read the unique number from the OTP memory and use a portion of that as the passkey or input a unique number on the OTP/SPI-Flash when programming the device.\n\nYes, you are correct you should read the OTP memory and use the OTP header file to create a passkey and then store it either on OTP or in SPI Flash.As discussed before, if you want to do this inside your code, you can refer on the default_app_generate_unique_static_random_addr API on the app_default_handler.c/h files:/**\r\n ****************************************************************************************\r\n * @brief Generate a 48-bit unique static random address. The static random address is\r\n *        generated only once in a device power cycle and it is stored in the retention\r\n *        RAM. It is based on the OTP header data (device time stamp, site ID, test site,\r\n *        bandgap and LNA trim value) thus is guaranteed to be constant over every power\r\n *        cycle. The two MSB shall be equal to '1'.\r\n * @param[in,out] addr      The generated static random address\r\n ****************************************************************************************\r\n */\r\nvoid default_app_generate_unique_static_random_addr(struct bd_addr *addr);\r\n\r\n\r\nvoid default_app_generate_unique_static_random_addr(struct bd_addr *addr)\r\n{\r\n    // Check if the static random address is already generated.\r\n    // If it is already generated the two MSB are equal to '1'\r\n    if (!(addr->addr[BD_ADDR_LEN - 1] & GAP_STATIC_ADDR))\r\n    {\r\n        uint32_t val1, val2;\r\n        uint32_t timestamp;\r\n\r\n#if defined (__DA14531__)\r\n        uint8_t package;\r\n        uint32_t tester, position, adc_single, adc_diff;\r\n#else\r\n        uint32_t siteID, trim;\r\n#endif\r\n\r\n        // Initialize OTP controller\r\n        hw_otpc_init();\r\n\r\n#if defined (__DA14531__)\r\n        hw_otpc_enter_mode(HW_OTPC_MODE_READ);\r\n#else\r\n        hw_otpc_manual_read_on(false);\r\n#endif\r\n\r\n        // Read OTP values\r\n#if defined (__DA14531__)\r\n        package = (GetWord32(OTP_HDR_PACKAGE_ADDR) & 0x000000FF);\r\n        position = GetWord32(OTP_HDR_POSITION_ADDR);\r\n        tester = (GetWord32(OTP_HDR_TESTER_ADDR) & 0x00FFFFFF);\r\n        timestamp = GetWord32(OTP_HDR_TIMESTAMP_ADDR);\r\n\r\n        adc_single = (otp_cs_get_adc_single_offset() << 16) | otp_cs_get_adc_single_ge();\r\n        adc_diff = (otp_cs_get_adc_diff_offset() << 16) | otp_cs_get_adc_diff_ge();\r\n\r\n        val1 = timestamp ^ position ^ adc_single;\r\n        val2 = tester ^ package ^ adc_diff;\r\n#else\r\n        timestamp = GetWord32(OTP_TIMESTAMP_ADDR);  // Device time stamp\r\n        siteID = GetWord8(OTP_SITE_ID_ADDR) & 0x7;  // Get the Site ID (3-bits)\r\n        timestamp ^= (siteID << 30);                // Add test site to MSB\r\n\r\n        trim = siteID >> 2;                         // MSb of Site ID\r\n        trim |= (GetWord8(OTP_BANDGAP_ADDR) & 0x3F) << 1;   // Bandgap trim (6-bits)\r\n        trim |= (GetWord8(OTP_LNA_ADDR) & 0x7F) << 7;       // LNA trim (7-bits)\r\n\r\n        val1 = timestamp;\r\n        val2 = trim;\r\n#endif\r\n\r\n        hw_otpc_disable();\r\n\r\n        // Shuffle the bits to 'look' more random\r\n        val1 = hash(val1);\r\n        val2 = hash(val2);\r\n\r\n        // Assign unique address\r\n        addr->addr[0] = val1 & 0xFF;\r\n        addr->addr[1] = (val1 >> 8) & 0xFF;\r\n        addr->addr[2] = (val1 >> 16) & 0xFF;\r\n        addr->addr[3] = (val1 >> 24) & 0xFF;\r\n        addr->addr[4] = val2 & 0xFF;\r\n        addr->addr[5] = val2 >> 8;\r\n\r\n        // The two MSB shall be equal to '1'\r\n        addr->addr[BD_ADDR_LEN - 1] |= GAP_STATIC_ADDR;\r\n    }\r\n}\r\nAs you can see for DA14531, we read package, position, tester, timestamp, and the ADC calibration values from the OTP header and then we combine all of them while shuffling the bits in order to create a unique BDA.\u00a0Similar approach could be used to create a unique Passkey.However you are looking for a Production solution that can keep track of those Passkeys for each device etc.\n\nQuote: Is there software/hardware available that enables programming firmware onto the da14531mod device SPI Flash whereafter it either:\n\nReads the unique number from the OTP at adds it to a file (to be used for printing labels as well as for production documentation)or\nWrites a unique number from a prepared list of numbers in a file, editing the file to show which numbers have been used/printed?\n\n\nAre there other reccommended ways to setup a workflow where a worker has to label every device with unique labels? reliabilly keeping track of it all.\n\nFor Production purposes we strongly suggest our Production Tool Kit board: https://www.renesas.com/us/en/products/wireless-connectivity/bluetooth-low-energy/da14580prodtlkt-bluetooth-low-energy-soc-16-site-production-line-tool-kit#design_development.With PLT you can program and test 16 boards at the same time.\u00a0I am not going to describe all the procedure in detail since you can check this out on the PLT User Manual but I am going to show only the approach you can do on your side for this unique number:On the SmartBond_CFG_PLT.exe you can set all the parameters and tests you want to run on your custom devices. On the Memory Functions and Memory Header tabs you can configure OTP and SPI Flash. : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707318716909v1.pngAs you can see, you can select the Custom Memory Data option and specify if you want to use OTP or SPI Flash, the specific Address the data will be stored and the Data you want to store there.You can create a CSV file with unique Passkeys and the PLT will automatically write each pin on each device on the address you have specified.\u00a0You can also use a Barcode scanner or add manually the data you want.You can also add another custom test to read the specific Address so you are sure that the Passkey is correctly stored.\u00a0Another approach would be to create executables with CLI commands and use them with the PLT board to program the devices.\u00a0\n\nQuote: Maybe the Datamatrix present on the DA14531 contains something present on the OTP memory?I have read two different modules giving me the two strings:S23142907L09\u00a0 S23143022R15It would be most convenient if that were the case as we might be able to scan that and print a label containing the string data.\n\nCould you please clarify what do you mean by \"Datamatrix present on the DA14531\"?I did not understand how those two strings were generated.\u00a0Best Regards,OV_Renesas"
            },
            {
                "role": "Chatbot",
                "content": "Thank you for the reply, I'll have a thorough look at your answer tomorrow.Quick answer to the matrix question:Sorry, i didn't specify that the data matrixes are printed on top of the DA14531MOD module RF shields in the corner. Each module have a unique matrix and i have read them with the online reader on this page:https://online-barcode-reader.inliteresearch.com/: https://online-barcode-reader.inliteresearch.com/I have shared pictures of the matrixes on some of my modules as replies in this thread.Once again, thank you for all the help OV"
            },
            {
                "role": "User",
                "content": "Hi Clk,Thank you for the reply.\n\nQuote: Quick answer to the matrix question:Sorry, i didn't specify that the data matrixes are printed on top of the DA14531MOD module RF shields in the corner. Each module have a unique matrix and i have read them with the online reader on this page:https://online-barcode-reader.inliteresearch.com/: https://online-barcode-reader.inliteresearch.com/\n\nFrom my understanding, there is no correlation on the \"Data matrix\" and the OTP Header content.\u00a0I do not think it will be possible to use this Data matrix and guarantee a Unique Passkey generation for all your devices.Best Regards,OV_Renesas"
            },
            {
                "role": "Chatbot",
                "content": "The PLT looks very promising, we will order one, do you know if the golden unit scan test is compatible with RPA? it is mentioned on page 95 in\u00a0https://www.renesas.com/us/en/document/mat/um-b-163-da1453x-da1469x-production-line-tool-software-and-hw-user-manual?r=1580496: https://www.renesas.com/us/en/document/mat/um-b-163-da1453x-da1469x-production-line-tool-software-and-hw-user-manual?r=1580496\u00a0we'll probably get a golden unit as well if it is. Maybe it is included when getting the PLT? - my superiors love the scanner functionality as it resembles a workflow already used in production.Thank you for the help."
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nIam using DA14531 MOD BLE device with sdk CodeLess Version: 6.380.14.22.\nMy requirement is pairing code should support\u00a011 digit authentication.\nI tried to give the same but pairing didn't worked.\nuser_on_app_init()\n{\ncodeless_env.pin = 12345678912;\n}\n\nRegards,\nLaxmi Narayana."
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: My requirement is pairing code should support\u00a011 digit authentication.\nI tried to give the same but pairing didn't worked.\n\nThis is not possible. It is not a limitation of the DA14531 and SDK6 but a feature from the Bluetooth Low Energy Specification v5.1Please refer on the Bluetooth Specification v5.1: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707388063257v1.pngBest Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nWhen i click on Connect for the first time pairing pop-up is coming, even if i not entered passcode also it started communicating with BLE Application.\nIn my code i have set\n\u00a0user_app_on_init()\u00a0\n{\ncodeless_env.pin= 123456;\n\n}\nIam expecting, after entering pairing code\u00a0only it should connect and start communicating with Application.\nPls help me in fixing this issue.\n\nRegards,\nLaxmi Narayana."
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting\u00a0 your question online.Could you please clarify the Codeless SDK version you are working with?Did you use prior the AT+SEC command to set the Security level you want? Did you explicitly use the AT+PIN command to set the PIN or only inside your code?Have you changed the Services Permissions for this project? By default all Services are accessible without Authorization required, you can change that.Is your device central or peripheral?Please share the exact AT command sequence you used so we can try to replicate this.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV,\nThank for response, Iam using codeless Version:6.380.14.22.\nwe are not using any AT commands like AT+SEC, AT+PIN and we disabled all AT commands.\nI not touched any services related part in my code.\nMy device is central.\nPls find the attached Zip file.\ncommunity.renesas.com/.../codeless_5F00_5xx.zip: https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/codeless_5F00_5xx.zip\n\n\n\nRegards,\nLaxmi Narayana"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for the reply.\n\nQuote: we are not using any AT commands like AT+SEC, AT+PIN and we disabled all AT commands.\n\nWhat is the point of using the Codeless SDK if you have disabled all AT commands? Why not create a project with the Generic SDK6?Please check our Central with Security example:\u00a0BLE_SDK6_examples/connectivity/central_Security_Demo at main \u00b7 dialog-semiconductor/BLE_SDK6_examples (github.com): https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/central_Security_Demo\n\nQuote:  Iam using codeless Version:6.380.14.22.\n\nQuote: My device is central.\n\nPlease refer on the Codeless SDK Release Notes: https://www.renesas.com/us/en/document/rln/da145xx-codeless-sw-release-notes-v63801863?r=1600456: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707384318181v1.pngThe Bonding support for the Central role in Codeless is supported from SDK v6.380.16.55 version and later.\u00a0You will have to define the CFG_BOND_CMD_SUPPORTED macro in the da1458x_config_advanced.h file.On the SDK v6.380.14.22,\u00a0if you define the CFG_BOND_CMD_SUPPORTED macro and build the project you should receive the following in the output window: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707384434845v2.pngYou should either migrate into a later Codeless SDK version or use the Generic SDK6 to create your application since you are not utilizing the AT commands.\u00a0Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Renesas Team,\n\nI am trying to send my beaconing information on every 1hour\u00a0one sample I am\u00a0advertising.\u00a0\n\nRunning the timer internally\u00a0using MCU core, and when time reaches 1 hour then I will enable the RF core beacon activity, advertise the beacon data and disable the RF core and do the process forever without rebooting the device. please suggest the logic.\n\nI am trying this logic in DA14531MOD\u00a0hostless.\n\nThanks,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for posting your question online.\n\nQuote: I am trying to send my beaconing information on every 1hour\u00a0one sample I am\u00a0advertising.\u00a0\n\nRunning the timer internally\u00a0using MCU core, and when time reaches 1 hour then I will enable the RF core beacon activity, advertise the beacon data and disable the RF core and do the process forever without rebooting the device. please suggest the logic.\n\nI am trying this logic in DA14531MOD\u00a0hostless.\n\nYes, this is possible with the DA14531MOD.You can have the following scenario:You follow the ibeacon: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/ibeaconexample and the ble_app_sleepmode example (inside the SDK6).Note: We also have on Git examples for Eddystone beacon.You can start a timer (i.e. for 5seconds), start advertising, after 5 seconds the timer will expire and we stop advertising.When we stop advertising you can implement either Extended Sleep without advertising or Deep Sleep.In both cases you can have RTC configured in order to set an interrupt after 1 hour. After 1 hour repeat.Please refer on our SDK6 examples and the Tutorials on the DA14531 product page for more information.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "\nHi Renesas,\n\n\n\nThanks for your response.\n\n\nI did the same and implemented\u00a0the ibeacon logic and testing for every 30 secs\u00a0for testing wise.\n\n\nAttached\u00a0the code is working and sending for every 30 secs\u00a0and after 15 minutes the\u00a0device is getting\u00a0rebooted.\n\n\nMy logic is here initially the device is in connectable mode --> once i configure all the GATT services\u00a0to disconnect it goes in\n\nnon-connectable mode and starts running the timer and then it broadcasts the ibeacon advertisements based on timer\n30sec\u00a0given as an example.\n\n\nBut after some 15 minutes the device is getting\u00a0rebooted. Is there\u00a0any issue or modifications required under ble stack.\n\n\nI have attached the code for your reference.\n\n\nRegards,\nKumar\n\ncommunity.renesas.com/.../beacon.c: https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/beacon.c\u00a0 \u00a0/**\r\n ****************************************************************************************\r\n *\r\n * @file user_callback_config.h\r\n *\r\n * @brief Callback functions configuration file.\r\n *\r\n * Copyright (C) 2015-2019 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _USER_CALLBACK_CONFIG_H_\r\n#define _USER_CALLBACK_CONFIG_H_\r\n\r\n/*\r\n * INCLUDE FILES\r\n ****************************************************************************************\r\n */\r\n\r\n#include <stdio.h>\r\n#include \"app_callback.h\"\r\n#include \"app_default_handlers.h\"\r\n#include \"app_entry_point.h\"\r\n#include \"app_prf_types.h\"\r\n#if (BLE_APP_SEC)\r\n#include \"app_bond_db.h\"\r\n#endif // (BLE_APP_SEC)\r\n#include \"user_peripheral.h\"\r\n\r\n/*\r\n * LOCAL VARIABLE DEFINITIONS\r\n ****************************************************************************************\r\n */\r\nstatic const struct app_suotar_cb user_app_suotar_cb = {\r\n    .on_suotar_status_change = on_suotar_status_change,\r\n};\r\n\r\nstatic const struct app_callbacks user_app_callbacks = {\r\n    .app_on_connection                  = user_app_connection,\r\n    .app_on_disconnect                  = user_app_disconnect,\r\n    .app_on_update_params_rejected      = NULL,\r\n    .app_on_update_params_complete      = NULL,\r\n    .app_on_set_dev_config_complete     = default_app_on_set_dev_config_complete,\r\n    .app_on_adv_nonconn_complete        = user_app_adv_undirect_complete,//NULL,\r\n    .app_on_adv_undirect_complete       = user_app_adv_undirect_complete,\r\n    .app_on_adv_direct_complete         = NULL,\r\n    .app_on_db_init_complete            = default_app_on_db_init_complete,\r\n    .app_on_scanning_completed          = NULL,\r\n    .app_on_adv_report_ind              = NULL,\r\n    .app_on_get_dev_name                = default_app_on_get_dev_name,\r\n    .app_on_get_dev_appearance          = default_app_on_get_dev_appearance,\r\n    .app_on_get_dev_slv_pref_params     = default_app_on_get_dev_slv_pref_params,\r\n    .app_on_set_dev_info                = default_app_on_set_dev_info,\r\n    .app_on_data_length_change          = NULL,\r\n    .app_on_update_params_request       = default_app_update_params_request,\r\n    .app_on_generate_static_random_addr = default_app_generate_static_random_addr,\r\n    .app_on_svc_changed_cfg_ind         = NULL,\r\n    .app_on_get_peer_features           = NULL,\r\n#if (BLE_APP_SEC)\r\n    .app_on_pairing_request             = default_app_on_pairing_request,\r\n    .app_on_tk_exch                     = user_app_on_tk_exch,\r\n    .app_on_irk_exch                    = NULL,\r\n    .app_on_csrk_exch                   = default_app_on_csrk_exch,\r\n    .app_on_ltk_exch                    = default_app_on_ltk_exch,\r\n    .app_on_pairing_succeeded           = default_app_on_pairing_succeeded,\r\n    .app_on_encrypt_ind                 = NULL,\r\n    .app_on_encrypt_req_ind             = default_app_on_encrypt_req_ind,\r\n    .app_on_security_req_ind            = NULL,\r\n    .app_on_addr_solved_ind             = default_app_on_addr_solved_ind,\r\n    .app_on_addr_resolve_failed         = default_app_on_addr_resolve_failed,\r\n    .app_on_ral_cmp_evt                 = default_app_on_ral_cmp_evt,\r\n    .app_on_ral_size_ind                = NULL,\r\n    .app_on_ral_addr_ind                = NULL,\r\n#endif // (BLE_APP_SEC)\r\n};\r\n\r\n#if (BLE_APP_SEC)\r\nstatic const struct app_bond_db_callbacks user_app_bond_db_callbacks = {\r\n    .app_bdb_init                       = default_app_bdb_init,\r\n    .app_bdb_get_size                   = default_app_bdb_get_size,\r\n    .app_bdb_add_entry                  = default_app_bdb_add_entry,\r\n    .app_bdb_remove_entry               = NULL,\r\n    .app_bdb_search_entry               = default_app_bdb_search_entry,\r\n    .app_bdb_get_number_of_stored_irks  = default_app_bdb_get_number_of_stored_irks,\r\n    .app_bdb_get_stored_irks            = default_app_bdb_get_stored_irks,\r\n    .app_bdb_get_device_info_from_slot  = default_app_bdb_get_device_info_from_slot,\r\n};\r\n#endif // (BLE_APP_SEC)\r\n\r\n\r\n/*\r\n * \"app_process_catch_rest_cb\" symbol handling:\r\n * - Use #define if \"user_catch_rest_hndl\" is defined by the user\r\n * - Use const declaration if \"user_catch_rest_hndl\" is NULL\r\n */\r\n#define app_process_catch_rest_cb       user_catch_rest_hndl\r\n// static const catch_rest_event_func_t app_process_catch_rest_cb = NULL;\r\n\r\nstatic const struct arch_main_loop_callbacks user_app_main_loop_callbacks = {\r\n    .app_on_init            = user_app_init,\r\n\r\n    // By default the watchdog timer is reloaded and resumed when the system wakes up.\r\n    // The user has to take into account the watchdog timer handling (keep it running,\r\n    // freeze it, reload it, resume it, etc), when the app_on_ble_powered() is being\r\n    // called and may potentially affect the main loop.\r\n    .app_on_ble_powered     = NULL,\r\n\r\n    // By default the watchdog timer is reloaded and resumed when the system wakes up.\r\n    // The user has to take into account the watchdog timer handling (keep it running,\r\n    // freeze it, reload it, resume it, etc), when the app_on_system_powered() is being\r\n    // called and may potentially affect the main loop.\r\n    .app_on_system_powered  = NULL,\r\n\r\n    .app_before_sleep       = NULL,\r\n    .app_validate_sleep     = NULL,\r\n    .app_going_to_sleep     = NULL,\r\n    .app_resume_from_sleep  = NULL,\r\n};\r\n\r\n// Default Handler Operations\r\nstatic const struct default_app_operations user_default_app_operations = {\r\n    .default_operation_adv = user_app_adv_start,\r\n};\r\n\r\n// Place in this structure the app_<profile>_db_create and app_<profile>_enable functions\r\n// for SIG profiles that do not have this function already implemented in the SDK\r\n// or if you want to override the functionality. Check the prf_func array in the SDK\r\n// for your reference of which profiles are supported.\r\nstatic const struct prf_func_callbacks user_prf_funcs[] =\r\n{\r\n    {TASK_ID_INVALID,    NULL, NULL}   // DO NOT MOVE. Must always be last\r\n};\r\n\r\n#endif // _USER_CALLBACK_CONFIG_H_\r\n\n\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply.\n\nQuote: Attached\u00a0the code is working and sending for every 30 secs\u00a0and after 15 minutes the\u00a0device is getting\u00a0rebooted.\n\nThis sounds to me like the WatchDog expired and you got HW reset.\u00a0Have you attached a debugger to see where exactly the project crashes?\u00a0If it the project is stuck in:\r\nvoid platform_reset_func(uint32_t error)\r\n{\r\n    uint16_t tmp;\r\n\r\n#if (!PRODUCTION_TEST)\r\n    // Trigger assert if the reset reason is other than RESET_AFTER_SUOTA_UPDATE\r\n    ASSERT_WARNING(error == RESET_AFTER_SUOTA_UPDATE);\r\n#endif\r\n    // Trigger SW reset\r\n    tmp = GetWord16(SYS_CTRL_REG);\r\n    tmp = (tmp & ~REMAP_ADR0) | 0; // Map ROM at address 0\r\n    tmp |= SW_RESET;\r\n    SetWord16(SYS_CTRL_REG, tmp);\r\n}That means that you have a Heap Exhaustion issue.You can try to increase the Heap size from the da1458x_config_advanced.h file:/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n// #define DB_HEAP_SZ              1024\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\nBased on the source code you shared:1) You have 2\u00a0user_app_disconnect functions2) On user_app_disconnect you start advertising and immediately after you call the Stop advertising API, but on the custom callback\u00a0user_app_adv_undirect_complete you restart advertising. I do not understand the concept there.\u00a03) Have you implemented Deep Sleep or Extended Sleep without Advertising?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\nThanks\u00a0for your response. Based on your suggestion i modified the below fields:\n\n\nI already called the EXTENDED sleep in \"da1458x_config_advanced\".\n\nstatic const sleep_state_t app_default_sleep_mode = ARCH_EXT_SLEEP_ON;\n\n\nI increased the Heap size to\u00a0#define DB_HEAP_SZ\u00a0 4096\u00a0from the da1458x_config_advanced.h file:\n\u00a0\nSorry i just called twice in your shared file, but in my actual file one time called \"user_app_disconnect\"\n\u00a0\nuser_app_adv_undirect_complete called in call backup, then only my ibeacon transmitting every 30 secs without missing.\u00a0In general,\u00a0it will show BLE basic manufacturer data. But every 30secs iBeacon data will be advertising.\n\u00a0\nAny watchdog related\u00a0modifications required? please suggest.\n\u00a0\nThanks,\nKumar\n\n/**\r\n ****************************************************************************************\r\n *\r\n * @file da1458x_config_advanced.h\r\n *\r\n * @brief Advanced compile configuration file.\r\n *\r\n * Copyright (C) 2014-2020 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _DA1458X_CONFIG_ADVANCED_H_\r\n#define _DA1458X_CONFIG_ADVANCED_H_\r\n\r\n#include \"da1458x_stack_config.h\"\r\n\r\n#if !defined (__DA14531__)\r\n\r\n/****************************************************************************************************************/\r\n/* Low Power clock selection.                                                                                   */\r\n/*      -LP_CLK_XTAL32      External XTAL32K oscillator                                                         */\r\n/*      -LP_CLK_RCX20       Internal RCX clock                                                                  */\r\n/*      -LP_CLK_FROM_OTP    Use the selection in the corresponding field of OTP Header                          */\r\n/****************************************************************************************************************/\r\n#define CFG_LP_CLK              LP_CLK_XTAL32\r\n\r\n/****************************************************************************************************************/\r\n/* If defined the application uses a hardcoded value for XTAL16M trimming. Should be disabled for devices       */\r\n/* where XTAL16M is calibrated and trim value is stored in OTP.                                                 */\r\n/* Important note. The hardcoded value is the average value of the trimming values giving the optimal results   */\r\n/* for DA14585 DK devices. May not be applicable in other designs                                               */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_DEFAULT_XTAL16M_TRIM_VALUE_IF_NOT_CALIBRATED\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period to poll GTL iface. Time in msec.                                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_PERIODIC_WAKEUP_MS                  500  // 0.5s\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period if GTL iface is not enabled. Time in msec.                                            */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_EXTERNAL_WAKEUP_MS              600000  // 600s\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup from external processor running host application.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_EXTERNAL_WAKEUP\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup external processor when a message is sent to GTL                                                      */\r\n/****************************************************************************************************************/\r\n#undef CFG_WAKEUP_EXT_PROCESSOR\r\n\r\n/****************************************************************************************************************/\r\n/* Enables True Random Number Generator. A true random number, generated at system initialization, is used to   */\r\n/* seed any random number generator (C standard library, ChaCha20, etc.). The following supported options       */\r\n/* provide a trade-off between code size and start-up latency.                                                  */\r\n/* - undefined (or 0): TRNG is disabled.                                                                        */\r\n/* -   32:  Enables TRNG with   32 Bytes Buffer.                                                                */\r\n/* -   64:  Enables TRNG with   64 Bytes Buffer.                                                                */\r\n/* -  128:  Enables TRNG with  128 Bytes Buffer.                                                                */\r\n/* -  256:  Enables TRNG with  256 Bytes Buffer.                                                                */\r\n/* -  512:  Enables TRNG with  512 Bytes Buffer.                                                                */\r\n/* - 1024:  Enables TRNG with 1024 Bytes Buffer.                                                                */\r\n/****************************************************************************************************************/\r\n#define CFG_TRNG (1024)\r\n\r\n/****************************************************************************************************************/\r\n/* Creation of private and public keys using Elliptic Curve Diffie Hellman algorithms.                          */\r\n/* - defined:   Creation of ECDH keys and secure connection feature is enabled.                                 */\r\n/* - undefined: Creation of ECDH keys and secure connection feature is disabled. If application does not        */\r\n/*              support secure connections, it is reccomended to undefine CFG_ENABLE_SMP_SECURE in order to     */\r\n/*              enable faster start-up time and reduce code size.                                               */\r\n/****************************************************************************************************************/\r\n#undef CFG_ENABLE_SMP_SECURE\r\n\r\n/****************************************************************************************************************/\r\n/* Uses ChaCha20 random number generator instead of the C standard library random number generator.             */\r\n/****************************************************************************************************************/\r\n#undef CFG_USE_CHACHA20_RAND\r\n\r\n/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n// #define DB_HEAP_SZ              1024\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\n\r\n/****************************************************************************************************************/\r\n/* NVDS configuration                                                                                           */\r\n/* - CFG_NVDS_TAG_BD_ADDRESS            Default bdaddress. If bdaddress is written in OTP header this value is  */\r\n/*                                      ignored                                                                 */\r\n/* - CFG_NVDS_TAG_LPCLK_DRIFT           Low power clock drift. Permitted values in ppm are:                     */\r\n/*      + DRIFT_20PPM                                                                                           */\r\n/*      + DRIFT_30PPM                                                                                           */\r\n/*      + DRIFT_50PPM                                                                                           */\r\n/*      + DRIFT_75PPM                                                                                           */\r\n/*      + DRIFT_100PPM                                                                                          */\r\n/*      + DRIFT_150PPM                                                                                          */\r\n/*      + DRIFT_250PPM                                                                                          */\r\n/*      + DRIFT_500PPM                  Default value (500 ppm)                                                 */\r\n/* - CFG_NVDS_TAG_BLE_CA_TIMER_DUR      Channel Assessment Timer duration (Multiple of 10ms)                    */\r\n/* - CFG_NVDS_TAG_BLE_CRA_TIMER_DUR     Channel Reassessment Timer duration (Multiple of CA timer duration)     */\r\n/* - CFG_NVDS_TAG_BLE_CA_MIN_RSSI       Minimum RSSI Threshold                                                  */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_PKT         Number of packets to receive for statistics                             */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT     Number  of bad packets needed to remove a channel                       */\r\n/****************************************************************************************************************/\r\n#define CFG_NVDS_TAG_BD_ADDRESS             {0x03, 0x00, 0x70, 0xCA, 0xEA, 0x80}\r\n\r\n#define CFG_NVDS_TAG_LPCLK_DRIFT            DRIFT_500PPM\r\n#define CFG_NVDS_TAG_BLE_CA_TIMER_DUR       2000\r\n#define CFG_NVDS_TAG_BLE_CRA_TIMER_DUR      6\r\n#define CFG_NVDS_TAG_BLE_CA_MIN_RSSI        0x40\r\n#define CFG_NVDS_TAG_BLE_CA_NB_PKT          100\r\n#define CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT      50\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the logging of heap memories usage. The feature can be used in development/debug mode.               */\r\n/* Application must be executed in Keil debugger environment and \"da14585_586.lib\" must be replaced with        */\r\n/* \"da14585_586_with_heap_logging.lib\" in project structure under sdk_arch. Developer must stop execution       */\r\n/* and type disp_heaplog() in debugger's command window. Heap memory statistics will be displayed on window     */\r\n/****************************************************************************************************************/\r\n#undef CFG_LOG_HEAP_USAGE\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the BLE statistics measurement feature.                                                              */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_METRICS\r\n\r\n/****************************************************************************************************************/\r\n/* Output the Hardfault arguments to serial/UART interface.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_PRODUCTION_DEBUG_OUTPUT\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported TX data packet length (supportedMaxTxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxTxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxTxTime = (supportedMaxTxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_TX_PACKET_LENGTH        (251)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported RX data packet length (supportedMaxRxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxRxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxRxTime = (supportedMaxRxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_RX_PACKET_LENGTH        (251)\r\n\r\n/****************************************************************************************************************/\r\n/* Select external application/host transport layer:                                                            */\r\n/*     - 0 = GTL (auto)                                                                                         */\r\n/*     - 1 = HCI (auto)                                                                                         */\r\n/*     - 8 = GTL (fixed)                                                                                        */\r\n/*     - 9 = HCI (fixed)                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_H4TL                    (0)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter max value for the scan report list. The maximum value shall be 100.                         */\r\n/****************************************************************************************************************/\r\n#define CFG_BLE_DUPLICATE_FILTER_MAX    (10)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter flag for the scan report list. This flag controls what will be reported if the              */\r\n/* CFG_BLE_DUPLICATE_FILTER_MAX number is exceeded.                                                             */\r\n/*     - If the flag is defined, the extra devices are considered to be in the list and will not be reported.   */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_DUPLICATE_FILTER_FOUND\r\n\r\n/****************************************************************************************************************/\r\n/* Resolving list maximum size.                                                                                 */\r\n/****************************************************************************************************************/\r\n#define CFG_LLM_RESOLVING_LIST_MAX      LLM_RESOLVING_LIST_MAX\r\n\r\n/****************************************************************************************************************/\r\n/* Enables automatic data packet length negotiation.                                                            */\r\n/* NOTE: Enable only if peer device supports data length extension!!                                            */\r\n/****************************************************************************************************************/\r\n#undef AUTO_DATA_LENGTH_NEGOTIATION_UPON_NEW_CONNECTION\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum retention memory in bytes. The base address of the retention data is calculated from the selected    */\r\n/* size.                                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_SIZE    (2048)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum uninitialized retained data required by the application.                                             */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_UNINIT_SIZE (0)\r\n\r\n/****************************************************************************************************************/\r\n/* The Keil scatter file may be provided by the user. If the user provides his own scatter file, the system has */\r\n/* to be aware which RAM blocks has to retain. The 4th RAM block is always retained, since it contains the ROM  */\r\n/* data.                                                                                                        */\r\n/*     - CFG_RETAIN_RAM_1_BLOCK: if defined, the 1st RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_2_BLOCK: if defined, the 2nd RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_3_BLOCK: if defined, the 3rd RAM block must be retained.                                */\r\n/*                                                                                                              */\r\n/* If the CFG_CUSTOM_SCATTER_FILE flag is undefined, the system knows which blocks to retain based on the       */\r\n/* default SDK scatter file.                                                                                    */\r\n/****************************************************************************************************************/\r\n#undef CFG_CUSTOM_SCATTER_FILE\r\n#ifdef CFG_CUSTOM_SCATTER_FILE\r\n    #define CFG_RETAIN_RAM_1_BLOCK\r\n    #define CFG_RETAIN_RAM_2_BLOCK\r\n    #define CFG_RETAIN_RAM_3_BLOCK\r\n#endif\r\n\r\n/****************************************************************************************************************/\r\n/* Code location selection.                                                                                     */\r\n/*     - CFG_CODE_LOCATION_EXT: Code is loaded from SPI flash / I2C EEPROM / UART                               */\r\n/*     - CFG_CODE_LOCATION_OTP: Code is burned in the OTP                                                       */\r\n/* The above options are mutually exclusive and exactly one of them must be enabled.                            */\r\n/****************************************************************************************************************/\r\n#define CFG_CODE_LOCATION_EXT\r\n#undef CFG_CODE_LOCATION_OTP\r\n\r\n/****************************************************************************************************************/\r\n/* Temperature range selection.                                                                                 */\r\n/* - CFG_HIGH_TEMPERATURE:         Device is configured to operate at high temperature range (-40C to +105C).   */\r\n/* - CFG_AMB_TEMPERATURE:          Device is configured to operate at ambient temperature range (-40C to +40C). */\r\n/* - CFG_MID_TEMPERATURE:          Device is configured to operate at mid temperature range (-40C to +60C).     */\r\n/* - CFG_EXT_TEMPERATURE:          Device is configured to operate at ext temperature range (-40C to +85C).     */\r\n/* NOTE 1: High temperature support is not compatible with power optimizations. User shall undefine the         */\r\n/*         CFG_POWER_OPTIMIZATIONS flag, if device is to support the high temperature range feature.            */\r\n/****************************************************************************************************************/\r\n#define CFG_AMB_TEMPERATURE\r\n\r\n/****************************************************************************************************************/\r\n/* Enable power optimizations using the XTAL16M adaptive settling algorithm.                                    */\r\n/* NOTE: The XTAL16M adaptive settling algorithm works only with XTAL32K and not with RCX, as the LP clock.     */\r\n/****************************************************************************************************************/\r\n#define CFG_XTAL16M_ADAPTIVE_SETTLING\r\n\r\n\r\n\r\n#else\r\n\r\n\r\n\r\n/****************************************************************************************************************/\r\n/* Low Power clock selection.                                                                                   */\r\n/*      -LP_CLK_XTAL32      External XTAL32K oscillator                                                         */\r\n/*      -LP_CLK_RCX20       Internal RCX clock                                                                  */\r\n/*      -LP_CLK_FROM_OTP    Use the selection in the corresponding field of OTP Header                          */\r\n/****************************************************************************************************************/\r\n#define CFG_LP_CLK              LP_CLK_RCX20\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period to poll GTL iface. Time in msec.                                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_PERIODIC_WAKEUP_MS                  500  // 0.5s\r\n\r\n/****************************************************************************************************************/\r\n/* Periodic wakeup period if GTL iface is not enabled. Time in msec.                                            */\r\n/****************************************************************************************************************/\r\n#define CFG_MAX_SLEEP_DURATION_EXTERNAL_WAKEUP_MS              600000  // 600s\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup from external processor running host application.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_EXTERNAL_WAKEUP\r\n\r\n/****************************************************************************************************************/\r\n/* Wakeup external processor when a message is sent to GTL                                                      */\r\n/****************************************************************************************************************/\r\n#undef CFG_WAKEUP_EXT_PROCESSOR\r\n\r\n/****************************************************************************************************************/\r\n/* Enables True Random Number Generator. A true random number, generated at system initialization, is used to   */\r\n/* seed any random number generator (C standard library, ChaCha20, etc.).                                       */\r\n/****************************************************************************************************************/\r\n#define CFG_TRNG\r\n\r\n/****************************************************************************************************************/\r\n/* Creation of private and public keys using Elliptic Curve Diffie Hellman algorithms.                          */\r\n/* - defined:   Creation of ECDH keys and secure connection feature is enabled.                                 */\r\n/* - undefined: Creation of ECDH keys and secure connection feature is disabled. If application does not        */\r\n/*              support secure connections, it is reccomended to undefine CFG_ENABLE_SMP_SECURE in order to     */\r\n/*              enable faster start-up time and reduce code size.                                               */\r\n/****************************************************************************************************************/\r\n#undef CFG_ENABLE_SMP_SECURE\r\n\r\n/****************************************************************************************************************/\r\n/* Uses ChaCha20 random number generator instead of the C standard library random number generator.             */\r\n/****************************************************************************************************************/\r\n#undef CFG_USE_CHACHA20_RAND\r\n\r\n/****************************************************************************************************************/\r\n/* Custom heap sizes                                                                                            */\r\n/****************************************************************************************************************/\r\n #define DB_HEAP_SZ              2048 //buzz for SUOTA\r\n// #define ENV_HEAP_SZ             4928\r\n// #define MSG_HEAP_SZ             6880\r\n// #define NON_RET_HEAP_SZ         2048\r\n\r\n/****************************************************************************************************************/\r\n/* NVDS configuration                                                                                           */\r\n/* - CFG_NVDS_TAG_BD_ADDRESS            Default bdaddress. If bdaddress is written in OTP header this value is  */\r\n/*                                      ignored                                                                 */\r\n/* - CFG_NVDS_TAG_LPCLK_DRIFT           Low power clock drift. Permitted values in ppm are:                     */\r\n/*      + DRIFT_20PPM                                                                                           */\r\n/*      + DRIFT_30PPM                                                                                           */\r\n/*      + DRIFT_50PPM                                                                                           */\r\n/*      + DRIFT_75PPM                                                                                           */\r\n/*      + DRIFT_100PPM                                                                                          */\r\n/*      + DRIFT_150PPM                                                                                          */\r\n/*      + DRIFT_250PPM                                                                                          */\r\n/*      + DRIFT_500PPM                  Default value (500 ppm)                                                 */\r\n/* - CFG_NVDS_TAG_BLE_CA_TIMER_DUR      Channel Assessment Timer duration (Multiple of 10ms)                    */\r\n/* - CFG_NVDS_TAG_BLE_CRA_TIMER_DUR     Channel Reassessment Timer duration (Multiple of CA timer duration)     */\r\n/* - CFG_NVDS_TAG_BLE_CA_MIN_RSSI       Minimum RSSI Threshold                                                  */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_PKT         Number of packets to receive for statistics                             */\r\n/* - CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT     Number  of bad packets needed to remove a channel                       */\r\n/****************************************************************************************************************/\r\n#define CFG_NVDS_TAG_BD_ADDRESS             {0x03, 0x00, 0x70, 0xCA, 0xEA, 0x80}\r\n\r\n#define CFG_NVDS_TAG_LPCLK_DRIFT            DRIFT_500PPM\r\n#define CFG_NVDS_TAG_BLE_CA_TIMER_DUR       2000\r\n#define CFG_NVDS_TAG_BLE_CRA_TIMER_DUR      6\r\n#define CFG_NVDS_TAG_BLE_CA_MIN_RSSI        0x40\r\n#define CFG_NVDS_TAG_BLE_CA_NB_PKT          100\r\n#define CFG_NVDS_TAG_BLE_CA_NB_BAD_PKT      50\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the logging of heap memories usage. The feature can be used in development/debug mode.               */\r\n/* Application must be executed in Keil debugger environment and \"da14531.lib\" must be replaced with            */\r\n/* \"da14531_with_heap_logging.lib\" in project structure under sdk_arch. Developer must stop execution           */\r\n/* and type disp_heaplog() in debugger's command window. Heap memory statistics will be displayed on window     */\r\n/****************************************************************************************************************/\r\n#undef CFG_LOG_HEAP_USAGE\r\n\r\n/****************************************************************************************************************/\r\n/* Enables the BLE statistics measurement feature.                                                              */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_METRICS\r\n\r\n/****************************************************************************************************************/\r\n/* Output the Hardfault arguments to serial/UART interface.                                                     */\r\n/****************************************************************************************************************/\r\n#undef CFG_PRODUCTION_DEBUG_OUTPUT\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported TX data packet length (supportedMaxTxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxTxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxTxTime = (supportedMaxTxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_MAX_TX_PACKET_LENGTH        (251)\r\n#define CFG_MAX_TX_PACKET_LENGTH        (27)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum supported RX data packet length (supportedMaxRxOctets value, as defined in 4.2 Specification).       */\r\n/* Range: 27 - 251 octets.                                                                                      */\r\n/* NOTE 1: Even number of octets are not supported. A selected even number will be automatically converted to   */\r\n/*         the next odd one.                                                                                    */\r\n/* NOTE 2: The supportedMaxRxTime value is automatically calculated by the ROM code, according to the following */\r\n/*         equation:                                                                                            */\r\n/*             supportedMaxRxTime = (supportedMaxRxOctets + 11 + 3 ) * 8                                        */\r\n/*         Range: 328 - 2120 usec.                                                                              */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_MAX_RX_PACKET_LENGTH        (251)\r\n#define CFG_MAX_RX_PACKET_LENGTH        (27)\r\n\r\n/****************************************************************************************************************/\r\n/* Select external application/host transport layer:                                                            */\r\n/*     - 0 = GTL (auto)                                                                                         */\r\n/*     - 1 = HCI (auto)                                                                                         */\r\n/*     - 8 = GTL (fixed)                                                                                        */\r\n/*     - 9 = HCI (fixed)                                                                                        */\r\n/****************************************************************************************************************/\r\n#define CFG_USE_H4TL                    (0)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter max value for the scan report list. The maximum value shall be 100.                         */\r\n/****************************************************************************************************************/\r\n#define CFG_BLE_DUPLICATE_FILTER_MAX    (10)\r\n\r\n/****************************************************************************************************************/\r\n/* Duplicate filter flag for the scan report list. This flag controls what will be reported if the              */\r\n/* CFG_BLE_DUPLICATE_FILTER_MAX number is exceeded.                                                             */\r\n/*     - If the flag is defined, the extra devices are considered to be in the list and will not be reported.   */\r\n/****************************************************************************************************************/\r\n#undef CFG_BLE_DUPLICATE_FILTER_FOUND\r\n\r\n/****************************************************************************************************************/\r\n/* Resolving list maximum size.                                                                                 */\r\n/****************************************************************************************************************/\r\n#define CFG_LLM_RESOLVING_LIST_MAX      LLM_RESOLVING_LIST_MAX\r\n\r\n/****************************************************************************************************************/\r\n/* Enables automatic data packet length negotiation.                                                            */\r\n/* NOTE: Enable only if peer device supports data length extension!!                                            */\r\n/****************************************************************************************************************/\r\n#undef AUTO_DATA_LENGTH_NEGOTIATION_UPON_NEW_CONNECTION\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum retention memory in bytes. The base address of the retention data is calculated from the selected    */\r\n/* size.                                                                                                        */\r\n/****************************************************************************************************************/\r\n//buzz #define CFG_RET_DATA_SIZE    (2048)\r\n//#define CFG_RET_DATA_SIZE    (2200)\r\n#define CFG_RET_DATA_SIZE    (2048)\r\n\r\n/****************************************************************************************************************/\r\n/* Maximum uninitialized retained data required by the application.                                             */\r\n/****************************************************************************************************************/\r\n#define CFG_RET_DATA_UNINIT_SIZE (0)\r\n\r\n/****************************************************************************************************************/\r\n/* The Keil scatter file may be provided by the user. If the user provides his own scatter file, the system has */\r\n/* to be aware which RAM blocks has to retain. The 3rd RAM block is always retained, since it contains the ROM  */\r\n/* data.                                                                                                        */\r\n/*     - CFG_RETAIN_RAM_1_BLOCK: if defined, the 1st RAM block must be retained.                                */\r\n/*     - CFG_RETAIN_RAM_2_BLOCK: if defined, the 2nd RAM block must be retained.                                */\r\n/*                                                                                                              */\r\n/* If the CFG_CUSTOM_SCATTER_FILE flag is undefined, the system knows which blocks to retain based on the       */\r\n/* default SDK scatter file.                                                                                    */\r\n/****************************************************************************************************************/\r\n#undef CFG_CUSTOM_SCATTER_FILE\r\n#ifdef CFG_CUSTOM_SCATTER_FILE\r\n    #define CFG_RETAIN_RAM_1_BLOCK\r\n    #define CFG_RETAIN_RAM_2_BLOCK\r\n#endif\r\n\r\n/****************************************************************************************************************/\r\n/* Code location selection.                                                                                     */\r\n/*     - CFG_CODE_LOCATION_EXT: Code is loaded from SPI flash / I2C EEPROM / UART                               */\r\n/*     - CFG_CODE_LOCATION_OTP: Code is burned in the OTP                                                       */\r\n/* The above options are mutually exclusive and exactly one of them must be enabled.                            */\r\n/****************************************************************************************************************/\r\n#define CFG_CODE_LOCATION_EXT\r\n#undef CFG_CODE_LOCATION_OTP\r\n\r\n/****************************************************************************************************************/\r\n/* Temperature range selection.                                                                                 */\r\n/* - CFG_HIGH_TEMPERATURE:         Device is configured to operate at high temperature range (-40C to +105C).   */\r\n/* - CFG_AMB_TEMPERATURE:          Device is configured to operate at ambient temperature range (-40C to +40C). */\r\n/* - CFG_MID_TEMPERATURE:          Device is configured to operate at mid temperature range (-40C to +60C).     */\r\n/* - CFG_EXT_TEMPERATURE:          Device is configured to operate at ext temperature range (-40C to +85C).     */\r\n/****************************************************************************************************************/\r\n#define CFG_AMB_TEMPERATURE\r\n\r\n/****************************************************************************************************************/\r\n/* Disable quadrature decoder on start up. The quadrature decoder is by default enabled on system power up and  */\r\n/* it may count events. This leads to WKUP_QUADEC_IRQn pending interrupts.                                      */\r\n/****************************************************************************************************************/\r\n#define CFG_DISABLE_QUADEC_ON_START_UP\r\n\r\n#endif\r\n\r\n#endif // _DA1458X_CONFIG_ADVANCED_H_\r\n\n\n/**\r\n ****************************************************************************************\r\n *\r\n * @file user_config.h\r\n *\r\n * @brief User configuration file.\r\n *\r\n * Copyright (C) 2015-2020 Dialog Semiconductor.\r\n * This computer program includes Confidential, Proprietary Information\r\n * of Dialog Semiconductor. All Rights Reserved.\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n#ifndef _USER_CONFIG_H_\r\n#define _USER_CONFIG_H_\r\n\r\n/*\r\n * INCLUDE FILES\r\n ****************************************************************************************\r\n */\r\n\r\n#include \"app_user_config.h\"\r\n#include \"arch_api.h\"\r\n#include \"app_default_handlers.h\"\r\n#include \"app_adv_data.h\"\r\n#include \"co_bt.h\"\r\n\r\n/*\r\n * DEFINES\r\n ****************************************************************************************\r\n */\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Privacy / Addressing configuration\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n/*************************************************************************\r\n * Privacy Capabilities and address configuration of local device:\r\n * - APP_CFG_ADDR_PUB               No Privacy, Public BDA\r\n * - APP_CFG_ADDR_STATIC            No Privacy, Random Static BDA\r\n * - APP_CFG_HOST_PRIV_RPA          Host Privacy, RPA, Public Identity\r\n * - APP_CFG_HOST_PRIV_NRPA         Host Privacy, NRPA (non-connectable ONLY)\r\n * - APP_CFG_CNTL_PRIV_RPA_PUB      Controller Privacy, RPA or PUB, Public Identity\r\n * - APP_CFG_CNTL_PRIV_RPA_RAND     Controller Privacy, RPA, Public Identity\r\n *\r\n * Select only one option for privacy / addressing configuration.\r\n **************************************************************************\r\n */\r\n#define USER_CFG_ADDRESS_MODE       APP_CFG_ADDR_PUB\r\n\r\n/*************************************************************************\r\n * Controller Privacy Mode:\r\n * - APP_CFG_CNTL_PRIV_MODE_NETWORK Controler Privacy Network mode (default)\r\n * - APP_CFG_CNTL_PRIV_MODE_DEVICE  Controler Privacy Device mode\r\n *\r\n * Select only one option for controller privacy mode configuration.\r\n **************************************************************************\r\n */\r\n#define USER_CFG_CNTL_PRIV_MODE     APP_CFG_CNTL_PRIV_MODE_NETWORK\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Security configuration\r\n *\r\n ****************************************************************************************\r\n */\r\n\r\n/************************************************************\r\n * Device IO Capability (@see gap_io_cap)\r\n *\r\n * - GAP_IO_CAP_DISPLAY_ONLY          Display Only\r\n * - GAP_IO_CAP_DISPLAY_YES_NO        Display Yes No\r\n * - GAP_IO_CAP_KB_ONLY               Keyboard Only\r\n * - GAP_IO_CAP_NO_INPUT_NO_OUTPUT    No Input No Output\r\n * - GAP_IO_CAP_KB_DISPLAY            Keyboard Display\r\n *\r\n * Select only one option.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_IO_CAP    GAP_IO_CAP_DISPLAY_YES_NO\r\n\r\n/************************************************************\r\n * OOB information (@see gap_oob)\r\n *\r\n * - GAP_OOB_AUTH_DATA_NOT_PRESENT    OOB Data not present\r\n * - GAP_OOB_AUTH_DATA_PRESENT        OOB data present\r\n *\r\n * Select only one option.\r\n * Note: OOB is only supported with Legacy Pairing\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_OOB       GAP_OOB_AUTH_DATA_NOT_PRESENT\r\n\r\n/************************************************************\r\n * Authentication Requirements (@see gap_auth_mask)\r\n *\r\n * - GAP_AUTH_NONE      None\r\n * - GAP_AUTH_BOND      Bond\r\n * - GAP_AUTH_MITM      MITM\r\n * - GAP_AUTH_SEC       Secure Connection\r\n * - GAP_AUTH_KEY       Keypress Notification (Not Supported)\r\n *\r\n * Any combination of the above.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_AUTH_REQ  (GAP_AUTH_BOND | GAP_AUTH_MITM | GAP_AUTH_SEC)\r\n\r\n/************************************************************\r\n * Encryption Max key size (7 to 16) - USER_CFG_FEAT_KEY_SIZE\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_KEY_SIZE  KEY_LEN\r\n\r\n/************************************************************\r\n * Device security requirements (@see gap_sec_req)\r\n *\r\n * - GAP_NO_SEC                 No security (no authentication and encryption)\r\n * - GAP_SEC1_NOAUTH_PAIR_ENC   Unauthenticated pairing with encryption\r\n * - GAP_SEC1_AUTH_PAIR_ENC     Authenticated pairing with encryption\r\n * - GAP_SEC1_SEC_PAIR_ENC      Authenticated LE Secure Connections pairing with encryption\r\n * - GAP_SEC2_NOAUTH_DATA_SGN   Unauthenticated pairing with data signing\r\n * - GAP_SEC2_AUTH_DATA_SGN     Authentication pairing with data signing\r\n *\r\n * Select only one option.\r\n ************************************************************\r\n */\r\n#define USER_CFG_FEAT_SEC_REQ   GAP_SEC1_NOAUTH_PAIR_ENC\r\n\r\n/**************************************************************************************\r\n * Initiator key distribution (@see gap_kdist)\r\n *\r\n * - GAP_KDIST_NONE             No Keys to distribute\r\n * - GAP_KDIST_ENCKEY           LTK (Encryption key) in distribution\r\n * - GAP_KDIST_IDKEY            IRK (ID key)in distribution\r\n * - GAP_KDIST_SIGNKEY          CSRK (Signature key) in distribution\r\n *\r\n * Any combination of the above\r\n **************************************************************************************\r\n */\r\n#define USER_CFG_FEAT_INIT_KDIST (GAP_KDIST_ENCKEY | GAP_KDIST_IDKEY | GAP_KDIST_SIGNKEY)\r\n\r\n/**************************************************************************************\r\n * Responder key distribution (@see gap_kdist)\r\n *\r\n * - GAP_KDIST_NONE             No Keys to distribute\r\n * - GAP_KDIST_ENCKEY           LTK (Encryption key) in distribution\r\n * - GAP_KDIST_IDKEY            IRK (ID key)in distribution\r\n * - GAP_KDIST_SIGNKEY          CSRK (Signature key) in distribution\r\n *\r\n * Any combination of the above\r\n **************************************************************************************\r\n */\r\n#define USER_CFG_FEAT_RESP_KDIST (GAP_KDIST_ENCKEY | GAP_KDIST_IDKEY | GAP_KDIST_SIGNKEY)\r\n\r\n/*\r\n * VARIABLES\r\n ****************************************************************************************\r\n */\r\n\r\n/******************************************\r\n * Default sleep mode. Possible values are:\r\n *\r\n * - ARCH_SLEEP_OFF\r\n * - ARCH_EXT_SLEEP_ON\r\n * - ARCH_EXT_SLEEP_OTP_COPY_ON\r\n *\r\n ******************************************\r\n */\r\n//BUZZ static const sleep_state_t app_default_sleep_mode = ARCH_SLEEP_OFF;\r\nstatic const sleep_state_t app_default_sleep_mode = ARCH_EXT_SLEEP_ON;\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Advertising configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct advertise_configuration user_adv_conf = {\r\n\r\n    .addr_src = APP_CFG_ADDR_SRC(USER_CFG_ADDRESS_MODE),\r\n\r\n    /// Minimum interval for advertising\r\n    .intv_min = MS_TO_BLESLOTS(687.5),                    // 687.5ms\r\n\r\n    /// Maximum interval for advertising\r\n    .intv_max = MS_TO_BLESLOTS(687.5),                    // 687.5ms\r\n\r\n    /**\r\n     *  Advertising channels map:\r\n     * - ADV_CHNL_37_EN:   Advertising channel map for channel 37.\r\n     * - ADV_CHNL_38_EN:   Advertising channel map for channel 38.\r\n     * - ADV_CHNL_39_EN:   Advertising channel map for channel 39.\r\n     * - ADV_ALL_CHNLS_EN: Advertising channel map for channel 37, 38 and 39.\r\n     */\r\n    .channel_map = ADV_ALL_CHNLS_EN,\r\n\r\n    /*************************\r\n     * Advertising information\r\n     *************************\r\n     */\r\n\r\n    /// Host information advertising data (GAPM_ADV_NON_CONN and GAPM_ADV_UNDIRECT)\r\n    /// Advertising mode :\r\n    /// - GAP_NON_DISCOVERABLE: Non discoverable mode\r\n    /// - GAP_GEN_DISCOVERABLE: General discoverable mode\r\n    /// - GAP_LIM_DISCOVERABLE: Limited discoverable mode\r\n    /// - GAP_BROADCASTER_MODE: Broadcaster mode\r\n    .mode = GAP_GEN_DISCOVERABLE,\r\n\r\n    /// Host information advertising data (GAPM_ADV_NON_CONN and GAPM_ADV_UNDIRECT)\r\n    /// Advertising filter policy:\r\n    /// - ADV_ALLOW_SCAN_ANY_CON_ANY: Allow both scan and connection requests from anyone\r\n    /// - ADV_ALLOW_SCAN_ANY_CON_WLST: Allow both scan req from anyone and connection req from\r\n    ///                                White List devices only\r\n    .adv_filt_policy = ADV_ALLOW_SCAN_ANY_CON_ANY,\r\n\r\n    /// Address of peer device\r\n    /// NOTE: Meant for directed advertising (ADV_DIRECT_IND)\r\n    .peer_addr = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6},\r\n\r\n    /// Address type of peer device (0=public/1=random)\r\n    /// NOTE: Meant for directed advertising (ADV_DIRECT_IND)\r\n    .peer_addr_type = 0,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Advertising or scan response data for the following cases:\r\n *\r\n * - ADV_IND: Connectable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 28 bytes.\r\n *    - The Flags data type are written by the related ROM function, hence the user shall\r\n *      not include them in the advertising data. The related ROM function adds 3 bytes in\r\n *      the start of the advertising data that are to be transmitted over the air.\r\n *    - The maximum length of the user defined response data shall be 31 bytes.\r\n *\r\n * - ADV_NONCONN_IND: Non-connectable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 31 bytes.\r\n *    - The Flags data type may be omitted, hence the user can use all the 31 bytes for\r\n *      data.\r\n *    - The scan response data shall be empty.\r\n *\r\n * - ADV_SCAN_IND: Scannable undirected advertising event.\r\n *    - The maximum length of the user defined advertising data shall be 31 bytes.\r\n *    - The Flags data type may be omitted, hence the user can use all the 31 bytes for\r\n *      data.\r\n *    - The maximum length of the user defined response data shall be 31 bytes.\r\n ****************************************************************************************\r\n */\r\n/// Advertising data\r\n/*\r\n#define USER_ADVERTISE_DATA         (\"\\x03\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_16BIT_SERVICE_IDS\\\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tADV_UUID_DEVICE_INFORMATION_SERVICE\\\r\n                                    \"\\x11\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_128BIT_SERVICE_IDS\\\r\n                                    \"\\x59\\x5A\\x08\\xE4\\x86\\x2A\\x9E\\x8F\\xE9\\x11\\xBC\\x7C\\x98\\x43\\x42\\x18\")\r\n*/\r\n\r\n#define USER_ADVERTISE_DATA         (\"\\x03\"\\\r\n                                    ADV_TYPE_COMPLETE_LIST_16BIT_SERVICE_IDS\\\r\n                                    ADV_UUID_SUOTAR_SERVICE)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n/// Advertising data length - maximum 28 bytes, 3 bytes are reserved to set\r\n#define USER_ADVERTISE_DATA_LEN               (sizeof(USER_ADVERTISE_DATA)-1)\r\n\r\n/// Scan response data\r\n#define USER_ADVERTISE_SCAN_RESPONSE_DATA \"\"\r\n\r\n/// Scan response data length- maximum 31 bytes\r\n#define USER_ADVERTISE_SCAN_RESPONSE_DATA_LEN (sizeof(USER_ADVERTISE_SCAN_RESPONSE_DATA)-1)\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Device name.\r\n *\r\n * - If there is space left in the advertising or scan response data the device name is\r\n *   copied there. The device name can be anytime read by a connected peer, if the\r\n *   application supports it.\r\n * - The Bluetooth device name can be up to 248 bytes.\r\n *\r\n ****************************************************************************************\r\n */\r\n/// Device name\r\n#define USER_DEVICE_NAME        \"Black Box\"\r\n\r\n/// Device name length\r\n#define USER_DEVICE_NAME_LEN    (sizeof(USER_DEVICE_NAME)-1)\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * GAPM configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct gapm_configuration user_gapm_conf = {\r\n    /// Device Role: Central, Peripheral, Observer, Broadcaster or All roles. (@see enum gap_role)\r\n    .role = GAP_ROLE_PERIPHERAL,\r\n\r\n    /// Maximal MTU. Shall be set to 23 if Legacy Pairing is used, 65 if Secure Connection is used,\r\n    /// more if required by the application\r\n//buzz    .max_mtu = 23,\r\n    .max_mtu = 65,\r\n\r\n    /// Device Address Type\r\n    .addr_type = APP_CFG_ADDR_TYPE(USER_CFG_ADDRESS_MODE),\r\n    /// Duration before regenerating the Random Private Address when privacy is enabled\r\n    .renew_dur = 15000,    // 15000 * 10ms = 150s is the minimum value\r\n\r\n    /***********************\r\n     * Privacy configuration\r\n     ***********************\r\n     */\r\n\r\n    /// Random Static address\r\n    // NOTE: The address shall comply with the following requirements:\r\n    // - the two most significant bits of the address shall be equal to 1,\r\n    // - all the remaining bits of the address shall NOT be equal to 1,\r\n    // - all the remaining bits of the address shall NOT be equal to 0.\r\n    // In case the {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} null address is used, a\r\n    // random static address will be automatically generated.\r\n    .addr = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\r\n\r\n    /// Device IRK used for Resolvable Private Address generation (LSB first)\r\n    .irk = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},\r\n\r\n    /****************************\r\n     * ATT database configuration\r\n     ****************************\r\n     */\r\n\r\n    /// Attribute database configuration (@see enum gapm_att_cfg_flag)\r\n    ///    7     6    5     4     3    2    1    0\r\n    /// +-----+-----+----+-----+-----+----+----+----+\r\n    /// | DBG | RFU | SC | PCP | APP_PERM |NAME_PERM|\r\n    /// +-----+-----+----+-----+-----+----+----+----+\r\n    /// - Bit [0-1]: Device Name write permission requirements for peer device (@see device_name_write_perm)\r\n    /// - Bit [2-3]: Device Appearance write permission requirements for peer device (@see device_appearance_write_perm)\r\n    /// - Bit [4]  : Slave Preferred Connection Parameters present\r\n    /// - Bit [5]  : Service change feature present in GATT attribute database.\r\n    /// - Bit [6]  : Reserved\r\n    /// - Bit [7]  : Enable Debug Mode\r\n    .att_cfg = GAPM_MASK_ATT_SVC_CHG_EN,\r\n\r\n    /// GAP service start handle\r\n    .gap_start_hdl = 0,\r\n\r\n    /// GATT service start handle\r\n    .gatt_start_hdl = 0,\r\n\r\n    /**************************************************\r\n     * Data packet length extension configuration (4.2)\r\n     **************************************************\r\n     */\r\n\r\n    /// Maximal MPS\r\n    .max_mps = 0,\r\n\r\n    /// Maximal Tx octets (connInitialMaxTxOctets value, as defined in 4.2 Specification)\r\n    .max_txoctets = 251,\r\n\r\n    /// Maximal Tx time (connInitialMaxTxTime value, as defined in 4.2 Specification)\r\n    .max_txtime = 2120,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Parameter update configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct connection_param_configuration user_connection_param_conf = {\r\n    /// Connection interval minimum measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .intv_min = MS_TO_DOUBLESLOTS(10),\r\n\r\n    /// Connection interval maximum measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .intv_max = MS_TO_DOUBLESLOTS(20),\r\n\r\n    /// Latency measured in connection events\r\n    .latency = 0,\r\n\r\n    /// Supervision timeout measured in timer units (10 ms)\r\n    /// use the macro MS_TO_TIMERUNITS to convert from milliseconds (ms) to timer units\r\n    .time_out = MS_TO_TIMERUNITS(1250),\r\n\r\n    /// Minimum Connection Event Duration measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .ce_len_min = MS_TO_DOUBLESLOTS(0),\r\n\r\n    /// Maximum Connection Event Duration measured in ble double slots (1.25ms)\r\n    /// use the macro MS_TO_DOUBLESLOTS to convert from milliseconds (ms) to double slots\r\n    .ce_len_max = MS_TO_DOUBLESLOTS(0),\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Default handlers configuration (applies only for @app_default_handlers.c)\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct default_handlers_configuration  user_default_hnd_conf = {\r\n    // Configure the advertise operation used by the default handlers\r\n    // Possible values:\r\n    //  - DEF_ADV_FOREVER\r\n    //  - DEF_ADV_WITH_TIMEOUT\r\n    .adv_scenario = DEF_ADV_FOREVER,\r\n\r\n    // Configure the advertise period in case of DEF_ADV_WITH_TIMEOUT.\r\n    // It is measured in timer units (3 min). Use MS_TO_TIMERUNITS macro to convert\r\n    // from milliseconds (ms) to timer units.\r\n    .advertise_period = MS_TO_TIMERUNITS(180000),\r\n\r\n    // Configure the security start operation of the default handlers\r\n    // if the security is enabled (CFG_APP_SECURITY)\r\n    // Possible values:\r\n    //  - DEF_SEC_REQ_NEVER\r\n    //  - DEF_SEC_REQ_ON_CONNECT\r\n    .security_request_scenario = DEF_SEC_REQ_NEVER\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Central configuration (not used by current example)\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct central_configuration user_central_conf = {\r\n    /// GAPM requested operation:\r\n    /// - GAPM_CONNECTION_DIRECT: Direct connection operation\r\n    /// - GAPM_CONNECTION_AUTO: Automatic connection operation\r\n    /// - GAPM_CONNECTION_SELECTIVE: Selective connection operation\r\n    /// - GAPM_CONNECTION_NAME_REQUEST: Name Request operation (requires to start a direct\r\n    ///   connection)\r\n    .code = GAPM_CONNECTION_DIRECT,\r\n\r\n    /// Own BD address source of the device:\r\n    .addr_src = APP_CFG_ADDR_SRC(USER_CFG_ADDRESS_MODE),\r\n\r\n    /// Scan interval\r\n    .scan_interval = 0x180,\r\n\r\n    /// Scan window size\r\n    .scan_window = 0x160,\r\n\r\n     /// Minimum of connection interval\r\n    .con_intv_min = 100,\r\n\r\n    /// Maximum of connection interval\r\n    .con_intv_max = 100,\r\n\r\n    /// Connection latency\r\n    .con_latency = 0,\r\n\r\n    /// Link supervision timeout\r\n    .superv_to = 0x1F4,\r\n\r\n     /// Minimum CE length\r\n    .ce_len_min = 0,\r\n\r\n    /// Maximum CE length\r\n    .ce_len_max = 0x5,\r\n\r\n    /**************************************************************************************\r\n     * Peer device information (maximum number of peers = 8)\r\n     **************************************************************************************\r\n     */\r\n\r\n    /// BD Address of device\r\n    .peer_addr_0 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_0_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_1 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_1_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_2_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_3_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_4 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_4_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_5 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_5_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_6 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_6_type = 0,\r\n\r\n    /// BD Address of device\r\n    .peer_addr_7 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0},\r\n\r\n    /// Address type of the device 0=public/1=random\r\n    .peer_addr_7_type = 0,\r\n};\r\n\r\n/*\r\n ****************************************************************************************\r\n *\r\n * Security related configuration\r\n *\r\n ****************************************************************************************\r\n */\r\nstatic const struct security_configuration user_security_conf = {\r\n    // IO Capabilities\r\n    #if defined (USER_CFG_FEAT_IO_CAP)\r\n    .iocap          = USER_CFG_FEAT_IO_CAP,\r\n    #else\r\n    .iocap          = GAP_IO_CAP_NO_INPUT_NO_OUTPUT,\r\n    #endif\r\n\r\n    // OOB Capabilities\r\n    #if defined (USER_CFG_FEAT_OOB)\r\n    .oob            = USER_CFG_FEAT_OOB,\r\n    #else\r\n    .oob            = GAP_OOB_AUTH_DATA_NOT_PRESENT,\r\n    #endif\r\n\r\n    // Authentication Requirements\r\n    #if defined (USER_CFG_FEAT_AUTH_REQ)\r\n    .auth           = USER_CFG_FEAT_AUTH_REQ,\r\n    #else\r\n    .auth           = GAP_AUTH_NONE,\r\n    #endif\r\n\r\n    // LTK size\r\n    #if defined (USER_CFG_FEAT_KEY_SIZE)\r\n    .key_size       = USER_CFG_FEAT_KEY_SIZE,\r\n    #else\r\n    .key_size       = KEY_LEN,\r\n    #endif\r\n\r\n    // Initiator key distribution\r\n    #if defined (USER_CFG_FEAT_INIT_KDIST)\r\n    .ikey_dist      = USER_CFG_FEAT_INIT_KDIST,\r\n    #else\r\n    .ikey_dist      = GAP_KDIST_NONE,\r\n    #endif\r\n\r\n    // Responder key distribution\r\n    #if defined (USER_CFG_FEAT_RESP_KDIST)\r\n    .rkey_dist      = USER_CFG_FEAT_RESP_KDIST,\r\n    #else\r\n    .rkey_dist      = GAP_KDIST_ENCKEY,\r\n    #endif\r\n\r\n    // Security requirements (minimum security level)\r\n    #if defined (USER_CFG_FEAT_SEC_REQ)\r\n    .sec_req        = USER_CFG_FEAT_SEC_REQ,\r\n    #else\r\n    .sec_req        = GAP_NO_SEC,\r\n    #endif\r\n};\r\n\r\n#endif // _USER_CONFIG_H_\r\n\n\n\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply and the clarifications.When you have enabled Extended Sleep mode, the Watchdog timer is being handled automatically.When you have disabled Extended Sleep mode and there is no Advertising/Scanning (general activity of the BLE core) you will have to handle the Watchdog manually.You can use the following APIs:\r\n/**\r\n ****************************************************************************************\r\n * @brief     Watchdog resume.\r\n * About: Start the Watchdog\r\n ****************************************************************************************\r\n */\r\n__STATIC_INLINE void  wdg_resume(void)\r\n{\r\n#if (USE_WDOG)\r\n    // Start WDOG\r\n    SetWord16(RESET_FREEZE_REG, FRZ_WDOG);\r\n#endif\r\n}\r\n\r\n/**\r\n****************************************************************************************\r\n* @brief     Freeze Watchdog. Call wdg_resume() to resume operation.\r\n* About: Freeze the Watchdog\r\n****************************************************************************************\r\n*/\r\n__STATIC_INLINE void  wdg_freeze(void)\r\n{\r\n    // Freeze WDOG\r\n    SetWord16(SET_FREEZE_REG, FRZ_WDOG);\r\n}\r\n\r\n/**\r\n ****************************************************************************************\r\n * @brief     Watchdog reload.\r\n * @param[in] period measured in 10.24ms units.\r\n * About: Load the default value and resume the watchdog\r\n ****************************************************************************************\r\n */\r\n__STATIC_INLINE void  wdg_reload(const int period)\r\n{\r\n#if (USE_WDOG)\r\n    // WATCHDOG_DEFAULT_PERIOD * 10.24ms\r\n    SetWord16(WATCHDOG_REG, WATCHDOG_DEFAULT_PERIOD);\r\n#endif\r\n}\r\nWith Heap increased are you still witnessing the same behavior? Did you try to increase it further?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\u00a0\nIn the last testing heap size was defined as --->\u00a0#define DB_HEAP_SZ\u00a0 2048. Then After 15 minutes the device rebooted. I mean crashed after 15 min\n\u00a0\nAfter you suggested again,\u00a0I changed\u00a0the heap size --->\u00a0\u00a0#define DB_HEAP_SZ\u00a0 4096. Then\u00a0After 30 minutes the device rebooted. I mean crashed after 30 min\n\u00a0\nYou mean to say to call the WATCHDOG ? Where should I call these\u00a0APIs? please suggest it to me.\n\u00a0\nNote:- In this my custom app i am using Connectable, Disconnectable, app_easy_timer, iBeacon, Battery reading, Passkey security, SUOTA profiles enabled.\n\nProfiles enabled:\n\u00a0\n#define CFG_PRF_DISS#define CFG_PRF_CUST1#define CFG_PRF_SUOTAR\n\nModules Enabled:\n\n#define EXCLUDE_DLG_GAP (0)#define EXCLUDE_DLG_TIMER (0)#define EXCLUDE_DLG_MSG (0)#define EXCLUDE_DLG_SEC (0)#define EXCLUDE_DLG_DISS (0)#define EXCLUDE_DLG_PROXR (1)#define EXCLUDE_DLG_BASS (1)#define EXCLUDE_DLG_FINDL (1)#define EXCLUDE_DLG_FINDT (1)#define EXCLUDE_DLG_SUOTAR (0)#define EXCLUDE_DLG_CUSTS1 (0)#define EXCLUDE_DLG_CUSTS2 (1)\n\nHow to optimize to rectify my issue, please recommend.\n\nMy compilation code as below size:\u00a0\nlinking...Program Size: Code=28776 RO-data=2588 RW-data=20 ZI-data=11372 \n\nThanks,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for the reply.\n\nQuote: After you suggested again,\u00a0I changed\u00a0the heap size --->\u00a0\u00a0#define DB_HEAP_SZ\u00a0 4096. Then\u00a0After 30 minutes the device rebooted. I mean crashed after 30 min\n\nThis means that the device was actually crashing due to heap exhaustion.Somewhere in side your code workflow there should be an issue that prevents the scheduler from freeing this memory space.\n\nQuote: You mean to say to call the WATCHDOG ? Where should I call these\u00a0APIs? please suggest it to me.\n\nWhat I mean by handling WatchDog:1) Include the arch_wdg.h file in your project2) When you disable Extended Sleep mode, then use the\u00a0wdg_freeze API, and before you re-enable the Extended Sleep mode, then use the\u00a0wdg_resume API.I still need to understand if you are utilizing Extended or Deep Sleep mode.If you could share the whole project in a zip file it would be easier for us to go through it and try to debug it on our side.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\n\nThanks\u00a0for your\u00a0email.\n\n\nDue to the large size, I uploaded the zip file from the link below please download it.\n\n\nRegards,\nKumar"
            },
            {
                "role": "Chatbot",
                "content": "Hi Kumar,Thank you for providing the project.I am not able to recreate the issue on my side.\u00a0I have left the project running for over 30 minutes on the Dev Kit Pro and I have connected multiple times via the SmartBond mobile application.After disconnect the device does not go into any Sleep mode or non-connectable advertising.Could you please share a high level explanation of how this project should work?i.e.\u00a01) Advertise with Extended Sleep mode2) Connect3) Pair with LE Secure Connections4) Disconnect5) Start advertising with non-connectable mode and Extended Sleep6)etc.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Renesas,\nCan you share your device BT MAC address for sharing the pass key to access the device.\nRegards,\nKumar"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\u00a0\nIam using DA14531, CodeLess\u00a0Version:6.380.14.22.\nMy requirement is to transmit minimum 500 bytes of data in single packet.\nThe problem iam facing is while transmitting data from ble it sending chucks of 176 bytes. This causing a issue in BLE to App\u00a0 communication.\nPls help me in solving this issue.\u00a0\n\nRegards,\u00a0\nLaxmi Narayana.\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: My requirement is to transmit minimum 500 bytes of data in single packet.\nThe problem iam facing is while transmitting data from ble it sending chucks of 176 bytes. This causing a issue in BLE to App\u00a0 communication.\n\nUnfortunately, this is not possible.The maximum supported value of a BLE packet is 251 bytes.\u00a0You can control this via the MTU on the user_config.h file.You can try to send 500 bytes of data, but the L2CAP protocol will break this into 2 separate packets.\u00a0Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV_Renesas,\nThank you for supporting and the suggestions from you helped me lot in learning and in development.\nRegards,\nLaxmi Narayana.\u00a0"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello,\n\nI am facing issue in DA14706 SoC that has been used in my design for BLE operations as well as to run low current applications from the output supply that DA14706 offers.\nI am able to get proper output voltages as mentioned in the datasheet. However, I am unable to load even 1mA current from V18 that has been generated through pin K2. For my application i want to draw maximum 50mA from this output voltage.\nIn the EVK also, i found that the daughterboard only gives 0.2VDC output on this particular K2 Pin.\nAny help in this would be highly appreciated.\nThanks in advance.\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Mohak,Thank you for posting your question online.Let me check on this and I will get back to you as soon as possible.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi,\n\u00a0 \u00a0 \u00a0 I am doing the advertisement one second interval and the advertisement mode is in connectable mode. sometimes when i am scanning the beacons there is no uuid bytes in the advertisement not even the major minor bytes only the length of 10 bytes its changing. but i never stopping the advertisement and starting that time , still its changing automatically .\n\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/1273.normal.PNG : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/2806.type_5F00_changing.PNG\n\nplease check is something wrong in this.\n\nThanks,\nSowmiya"
            },
            {
                "role": "Chatbot",
                "content": "Hi Sowmiya,Thank you for posting your question online and apologies for the delay.You have placed this question on the Bluetooth Forum instead of the Bluetooth Low Energy Forum. Let me move this to the BLE Forum.Regarding the change on the advertising data:1) Which BLE device are working with? Is it DA14531?2) Which SDK version are you working with?If you are using DA14531 and the default ibeacon example (from GitRepo) then it is expected the Advertising Data to change. There is an app_easy_timer that expires after 30 seconds that updates the Advertising Data.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "\nQuote: 1) Which BLE device are working with? Is it DA14531?2) Which SDK version are you working with?\n\nda14531 and sdk :\u00a06.0.16.1144\nDEF_ADV_FOREVER\u00a0 i have sets this type and where is that 30 sec timer that updates data ?\nstatic const struct default_handlers_configuration user_default_hnd_conf = { // Configure the advertise operation used by the default handlers // Possible values: // - DEF_ADV_FOREVER // - DEF_ADV_WITH_TIMEOUT .adv_scenario = DEF_ADV_FOREVER,\n// Configure the advertise period in case of DEF_ADV_WITH_TIMEOUT. // It is measured in timer units (3 min). Use MS_TO_TIMERUNITS macro to convert // from milliseconds (ms) to timer units. .advertise_period = MS_TO_TIMERUNITS(180000),\n// Configure the security start operation of the default handlers // if the security is enabled (CFG_APP_SECURITY) // Possible values: // - DEF_SEC_REQ_NEVER // - DEF_SEC_REQ_ON_CONNECT .security_request_scenario = DEF_SEC_REQ_NEVER};"
            },
            {
                "role": "Chatbot",
                "content": "Hi Sowmiya,Thank you for the reply.\n\nQuote: \u00a0One more query from this BLE advertising , can we use the Ibeacon advertisement format with connectable mode ?\nhttps://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/30092/ibeacon-abvertisemt-not-working-in-changing-of-connectable-mode: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/30092/ibeacon-abvertisemt-not-working-in-changing-of-connectable-mode\nThis was the link which i have queried before . is this method is possible now ?\n\nThe beacon format utilizes all 31 bytes of the Advertising data. This is possible only in non-connectable advertising.\u00a0If you use connectable advertising you can only use 28 bytes of the Advertising Data (3 bytes are reserved for Flags), this means that you cannot use the beacon formats with Connectable advertising.You can modify the Manufacturer Specific Data and add 28 bytes of custom information there that will resemble the beacon format.You could also try to add the beacon format on the Scan Response Data but only the Centrals that do Active Scan will be able to read them.\n\nQuote: da14531 and sdk :\u00a06.0.16.1144\nDEF_ADV_FOREVER\u00a0 i have sets this type and where is that 30 sec timer that updates data ?\n\nMost of our SDK6 examples have an app_easy_timer running that will update the Advertising data.The timer callback looks like this:/**\r\n ****************************************************************************************\r\n * @brief Advertisement data update timer callback function.\r\n ****************************************************************************************\r\n*/\r\nstatic void adv_data_update_timer_cb()\r\n{\r\n    // If mnd_data_index has MSB set, manufacturer data is stored in scan response\r\n    uint8_t *mnf_data_storage = (mnf_data_index & 0x80) ? stored_scan_rsp_data : stored_adv_data;\r\n\r\n    // Update manufacturer data\r\n    mnf_data_update();\r\n\r\n    // Update the selected fields of the advertising data (manufacturer data)\r\n    memcpy(mnf_data_storage + (mnf_data_index & 0x7F), &mnf_data, sizeof(struct mnf_specific_data_ad_structure));\r\n\r\n    // Update advertising data on the fly\r\n    app_easy_gap_update_adv_data(stored_adv_data, stored_adv_data_len, stored_scan_rsp_data, stored_scan_rsp_data_len);\r\n\r\n    // Restart timer for the next advertising update\r\n    app_adv_data_update_timer_used = app_easy_timer(APP_ADV_DATA_UPDATE_TO, adv_data_update_timer_cb);\r\n}\r\nPlease check if the\u00a0app_easy_gap_update_adv_data API is being called inside your code.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nI have a doubt regarding codeless\u00a0Version:6.380.14.22.\nHow do I get to know weather my code is acting as central or peripheral?\nIf it is central how can change it to peripheral?\nPls suggest the solution.\u00a0\nRegards,\nLaxmi Narayana.\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: How do I get to know weather my code is acting as central or peripheral?\n\nPlease refer on the UM-B-140 Codeless User Manual: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/index.html, on 9.35 AT+GAPSTATUS: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/atcommands.html#at-gapstatus : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707467245435v1.pngThe AT+GAPSTATUS command can be used to see if you are in Peripheral, Central role or if you are connected to another device.\n\nQuote: If it is central how can change it to peripheral?\n\nPlease refer on 9.33 AT+PERIPHERAL: https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/atcommands.html#at-peripheral : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707467317013v2.pngYou cannot issue the AT+PERIPHERAL command if you have established a connection or if any other AT commands are running (i.e. AT+GAPSCAN).Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello Team,\n\nSDK:\u00a0\u00a06.0.16.1144\nModule: DA14531MOD\n\nIs there support for Extended Advertisement as per Bluetooth 5.1? In my application I am using Unconnected broadcast to advertise the data and need to transfer more data hence I am looking for Extended Advertizement support as DA14531\u00a0claims it supports Bluetooth 5.1.\u00a0\nI was\u00a0thinking of implementing chunks of 200 bytes or more if Extended Advertisement supports and in the data packet header(custom) I can indicate the total bytes in the data and whether the complete data has been transferred in that chunk, just like file transfer chunks.\u00a0However, the current 32 bytes with Standard Advertisement is very small in size for chunks as it has to transfer multiple times, hence looking for an Extended Advertisement feature.\nI checked the support questions and I found this question:\u00a0advertising-extensions: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/19987/advertising-extensions. However, it says the\u00a0DA14531 does not support it, is this true even now?\nAnd also the suggestion from the above forum thread \"Except from the advertising data, you can also use the scan response data\" - If I use scan response data, what was the maximum data that it can transfer? Is this still achievable in unconnected mode? I feel Scan Requests\u00a0from\u00a0Central device\u00a0can come only in connected mode. Please correct me if my understanding is not correct.\nThe referred example describes with connected mode, however, I need unconnected mode. Is there any reference example available to send a large amount of data(over 500 bytes, or at least multiple chunks ) over unconnected mode, or any approach that you can suggest?\n\nThanks & Regards\nHarish.\u00a0\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Harish,Thank you for posting your question online.Let me try to answer your questions:\n\nQuote: I checked the support questions and I found this question:\u00a0advertising-extensions: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/19987/advertising-extensions. However, it says the\u00a0DA14531 does not support it, is this true even now?\n\nUnfortunately, the Extended Advertisement (ADV_EXT_IND) is not supported on the DA14531.\u00a0\n\nQuote: And also the suggestion from the above forum thread \"Except from the advertising data, you can also use the scan response data\" - If I use scan response data, what was the maximum data that it can transfer? Is this still achievable in unconnected mode? I feel Scan Requests\u00a0from\u00a0Central device\u00a0can come only in connected mode. Please correct me if my understanding is not correct.\n\nYes, you are correct. In order to receive the Scan Response Data, the central must perform Active Scan and the peripheral device cannot be performing unconnected advertising.\u00a0The Scan Response data have the same size as the Advertising data, 31 bytes, but they do not need the 3 first bytes reserved for Flags. So if you are interested in undirected advertising you can save 28 bytes of data on the Advertising Data and another 31 bytes of information on the Scan Response data.\u00a0Keep in mind that in the Advertising/Scan Response data you will need to save the Device Name as well.\u00a0Please refer on our GitRepo examples for beacons' (unconnected advertising):1)\u00a0BLE_SDK6_examples/connectivity/ibeacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/ibeacon2)\u00a0BLE_SDK6_examples/interfaces/wakeup_hibernation_ext_timer at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/interfaces/wakeup_hibernation_ext_timer3)\u00a0BLE_SDK6_examples/connectivity/simple_beacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/simple_beacon4)\u00a0BLE_SDK6_examples/connectivity/svc_data_beacon at main \u00b7 dialog-semiconductor/BLE_SDK6_examples \u00b7 GitHub: https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/svc_data_beaconKeep in mind that in unconnected advertising you are able to advertise 31 bytes of data but the Device Name can be saved on the Scan Response Data, no other data could be saved on the Scan Response Data.\n\nQuote: The referred example describes with connected mode, however, I need unconnected mode. Is there any reference example available to send a large amount of data(over 500 bytes, or at least multiple chunks ) over unconnected mode, or any approach that you can suggest?\n\nUnfortunately, we do not have any example with unconnected advertising that can support over 500 bytes being transmitted in each advertising packet.\u00a0You will have to send 31 bytes of information on each\u00a0advertising packet.\u00a0You could use undirected advertising in order to use the Scan Response Data as well and you could implement Security on your DA14531 so no central will be able to connect.\u00a0 This way you will be able to send 28+31 (-Device Name bytes) for your advertising packets.Kind Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV_Renesas,\n\nQuote: Unfortunately, the Extended Advertisement (ADV_EXT_IND) is not supported on the DA14531.\u00a0\n\n\nThank you for confirming. Is this limitation by SDK for the software side or the DA14531 Hardware side itself?\nIs\u00a0this feature on the roadmap and any timeline for when this might get supported by SDK?\u00a0\u00a0\n\nThanks,\nHarish\n"
            },
            {
                "role": "Chatbot",
                "content": "Hi Harish,Thank you for the reply.I will have to check on this internally and I will get back to you as soon as possible.Kind Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi Ov,\nI also have the same doubt,\u00a0 Any update on this.\nRegards,\nLaxmi Narayana\u00a0"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,The DA14531 does not and will not support the Extended Advertisement feature.The Extended Advertisement feature will be supported in our next BLE SoCs. Unfortunately, there is not an official timeline I could share on that.\u00a0Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi,\nI'm trying to compile an example project (simple_button) from BLE_SDK6_examples (github.com/dialog-semiconductor/).\nI have already the SDK installed and I have executed the python script as suggested (python dlg_make_keil5_env_v2.py -sdkpath \u201c<path to your sdk repository>\u201d).\nWhen I try to compile the project it says the following error:\nRebuild started: Project: simple_button*** Using Compiler 'V6.21', folder: 'C:\\Keil_v5\\ARM\\ARMCLANG\\Bin'Rebuild target 'Simple_Button_531'compiling exceptions.c...assembling startup_DA14531.s...compiling uart_utils.c...compiling systick.c...compiling system_DA14531.c...compiling user_periph_setup.c...compiling syscntl.c...compiling main.c...compiling otp_cs.c...compiling gpio.c...compiling hw_otpc_531.c...compiling uart.c...compiling arch_system.c...linking....\\out_DA14531\\Objects\\simple_button_531.axf: Error: L6218E: Undefined symbol arch_asm_delay_us (referred from uart.o).Not enough information to list image symbols.Not enough information to list load addresses in the image map.Finished: 2 information, 0 warning and 1 error messages.\".\\out_DA14531\\Objects\\simple_button_531.axf\" - 1 Error(s), 0 Warning(s).Target not created.Build Time Elapsed: 00:00:01\n\nI don't know what to do to remove this error.\nCan someone help me?\nThanks.\nBest regards"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javi,Thank you for posting your question online.The Git examples have been ported to SDK v6.0.18 and later.\u00a0Which SDK version are you trying to use?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "SDK\u00a0v6.0.20.1338"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javi,Thanks for the clarification.In order to compile our GitHub Examples on the SDK v6.0.20 you will need to follow the steps below:1) Download the example folder file and place it inside the\u00a0following path: ...\\6.0.20.1338\\projects\\target_apps\\ble_examples2) Use the Python script provided on our GitRepo to fix all the SDK paths to your PC3) Open the Project in Keil, and make sure to include the system_library files in the sdk_arch folder. : https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/pastedimage1706271771797v1.pngYou will only need to include the system_library_531.c file for the DA14531 SoC.or DA14531MOD.In order to do that, right click on sdk_arch folder and select \"Add Existing Files to Group 'sdk_arch' \" : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1706271829167v2.pngNavigate on the following path to find the system_library_531.c file: ...\\6.0.20.1338\\sdk\\platform\\system_library\\src\\DA145314) Save and compile the projectBest Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi,\nI have successfully compiled the project with 0 Errors.\nI'm trying to Debug but it doesn't find the JLink connected:\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707397346971v1.png\nI have also tried loading the .hex file with SmartBond but it doesn't find the JLink.\n : https://community.renesas.com/resized-image/__size/1126x338/__key/communityserver-discussions-components-files/297/pastedimage1707397394035v2.png\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707401186995v1.png\nWindows recognizes the JLink:\n : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707400706074v3.png\n\nThanks.\nRegards,\nJavier"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.From the Windows Manager you have shared I would guess that you have the USB DEV Kit.If I am mistaken, please correct me.\u00a0Are you sure that you have the correct DIP Switch configuration?Please refer on UM-B-125: https://www.renesas.com/us/en/document/mat/um-b-125-user-manual-da14531-usb-development-kit-hardware: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707402586368v1.pngIf the DIP Switch Configuration is correct, I would guess that there is a pre-loaded FW inside the Dev Kit that has disabled the SWD interface.\u00a0This can happen if you are in Sleep mode and cannot wake-up or if you explicitly remapped the SWD GPIOs.If this is the case, then you will need to use 1-Wire UART Configuration to access and erase the SPI Flash.In order to do that, you will have to use the following DIP Switch Configuration:DIP Switch [1 to 5]: ONDIP Switch [6 to 10]: OFFDIP Switch [11 to 12]: ONOn SmartSnippets Toolbox select DA14531 and the UART COM: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155081021v1.pngGo select the 1-Wire UART option on the Configurator tab: : https://community.renesas.com/resized-image/__size/1096x630/__key/communityserver-discussions-components-files/297/pastedimage1707155116118v2.pngGo to the Programmer tab--> Flash Code--> ConnectYou will be prompted on the Log window to trigger the Reset in order to successfully connect via 1-Wire UART.\u00a0After that you can Read and Erase the SPI Flash and try again to download your FW.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "I'm using the\u00a0Infineon XMC 2Go board to program the DA14531"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.I have no experience with the board you mentioned and I cannot provide support on that because it is from a 3rd party company.But I can give some insights:The DA14531 can be programmed either by the SWD interface or via 1-Wire UART.\u00a0The 1-Wire UART programming can be done with any USB to Serial Module (FTDI cable etc.) via our SmartSnippets Toolbox.\u00a0In your case now, you have a DA14531 SoC or DA14531MOD?Is it a custom board or just the IC?Could you please share a simple schematic so we can get a better understanding?Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi,\nThanks for the fast reply.\nI'm trying to follow this guide:\nEasy, Cost-Effective Bluetooth LE (BLE) with Dialog DA14531MOD - element14 Community: https://community.element14.com/technologies/open-source-hardware/b/blog/posts/easy-cost-effective-bluetooth-le-ble-with-dialog-da14531mod\n\nI'm using the chip with an LED soldered, I want to do a simple blinky LED test and build something more complex from that.\n\nThanks again.\nB.R.\nJavier"
            },
            {
                "role": "Chatbot",
                "content": "Hi Javier,Thank you for the reply.From my understanding you are working with the DA14531MOD.Please refer here:\u00a0DA14531 Tiny module - Bluetooth Low Energy - Wireless Connectivity - Renesas Engineering Community: https://community.renesas.com/wireles-connectivity/f/bluetooth-low-energy/32447/da14531-tiny-moduleMasCreyt wanted to download the Codeless Firmware on his board to test AT commands. You can follow the same procedure to download your firmware into the DA14531MOD.Unfortunately, I cannot provide you support for the specific Debugging board you have since it is not from Renesas or a partner of Renesas.\u00a0I can see on the link you shared some comments as well, another user which I believe is also part of this Forum, also faced some issues. Maybe his answer could be helpful to you.Best Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hello Forum, and Renesas support. I thought that answers to the following question might be useful for others as well, so I'll ask on this forum.\nI have some production focused questions pertaining to da14531mod based devices.\nI am trying to find a workflow where i can produce a sticker with a unique number which i will use, in the device, as a predetermined passkey. The device is only equipped with a button, having no display of its own. I realise that i either have to read the unique number from the OTP memory and use a portion of that as the passkey or input a unique number on the OTP/SPI-Flash when programming the device. The device runns a GATT server implemented with SDK6.\n\nIs there software/hardware available that enables programming firmware onto the da14531mod device SPI Flash whereafter it either:\n\nReads the unique number from the OTP at adds it to a file (to be used for printing labels as well as for production documentation)or\nWrites a unique number from a prepared list of numbers in a file, editing the file to show which numbers have been used/printed?\n\n\nAre there other reccommended ways to setup a workflow where a worker has to label every device with unique labels? reliabilly keeping track of it all.\n\n-conversing with one of our costumers moved the goalpost. I will try to accommedate this in a way that dosn't inconviene the production staff too much."
            },
            {
                "role": "Chatbot",
                "content": "Hi CLK,Thank you for posting your question online.Let me check on this and I will get back to you with a complete response to your questions.In the meantime\u00a0let me just help you with the USB Dev Kit and OTP:\n\nQuote: When i try to read OTP memory, using the usb dev kit and the smartsnippets toolbox, i get these error messages. By now i have a few of the dev kits and none of them succeed, even an unmodded one talking to its onboard DA14531 fails. I am clearly doing something wrong, CRC dosn't match -.-?\n\nI believe that you have not set the DIP Switch configuration correctly on the USB Dev Kit.Please use the following configuration:DIP Switch [1 to 5]: ONDIP Switch [6 to 10]: OFFDIP Switch [11 to 12]: ONOn SmartSnippets Toolbox select DA14531 and the UART COM: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155081021v1.pngGo select the 1-Wire UART option on the Configurator tab: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155116118v2.pngThen go on Programmer-->OTP and press Connect. Trigger the RST button when you are prompted by the Log Window.On my side I was able to connect and read the OTP: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707155158254v3.pngBest Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": " : https://community.renesas.com/resized-image/__size/1304x278/__key/communityserver-discussions-components-files/297/pastedimage1707146637349v3.pngWhen i try to read OTP memory, using the usb dev kit and the smartsnippets toolbox, i get these error messages. By now i have a few of the dev kits and none of them succeed, even an unmodded one talking to its onboard DA14531 fails. I am clearly doing something wrong, CRC dosn't match -.-?"
            },
            {
                "role": "Chatbot",
                "content": "I have now tried to correlate the OTP header and the data Matrix: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707212958432v1.jpegOPT Header:0x07F87FC0\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FC8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FD0\u00a0\u00a0 \u00a0AA FF 00 00 FF FF FF FF \u00a0\u00a0 \u00a0\uffaa\u00a0 0x07F87FD8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FE0\u00a0\u00a0 \u00a000 00 00 00 07 A4 01 00 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 \uffa4 0x07F87FE8\u00a0\u00a0 \u00a077 0D BA 14 FF FF FF FF \u00a0\u00a0 \u00a0w\uffba0x07F87FF0\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF \u00a0\u00a0 \u00a00x07F87FF8\u00a0\u00a0 \u00a0FF FF FF FF FF FF FF FF Data matrix barcode:S23142904R05Possible Dec conversion of timestamp\u00a0 77\u00a0\u00a0 0D\u00a0\u00a0 BA\u00a0\u00a0 14\u00a0119\u00a0\u00a0 13\u00a0 186\u00a0\u00a0 200707 0013 1110 0104I see no corrolation. I don't understand the timestamp syntax and i suspect that the timestamp in the OTP is from manufactureing the chip where the da14531mod module has a different timestamp worked into the datamatrix barcode. Another solution seems to be warranted."
            },
            {
                "role": "User",
                "content": "Hi CLK,Apologies for the delay.\n\nQuote: I am trying to find a workflow where i can produce a sticker with a unique number which i will use, in the device, as a predetermined passkey. The device is only equipped with a button, having no display of its own. I realise that i either have to read the unique number from the OTP memory and use a portion of that as the passkey or input a unique number on the OTP/SPI-Flash when programming the device.\n\nYes, you are correct you should read the OTP memory and use the OTP header file to create a passkey and then store it either on OTP or in SPI Flash.As discussed before, if you want to do this inside your code, you can refer on the default_app_generate_unique_static_random_addr API on the app_default_handler.c/h files:/**\r\n ****************************************************************************************\r\n * @brief Generate a 48-bit unique static random address. The static random address is\r\n *        generated only once in a device power cycle and it is stored in the retention\r\n *        RAM. It is based on the OTP header data (device time stamp, site ID, test site,\r\n *        bandgap and LNA trim value) thus is guaranteed to be constant over every power\r\n *        cycle. The two MSB shall be equal to '1'.\r\n * @param[in,out] addr      The generated static random address\r\n ****************************************************************************************\r\n */\r\nvoid default_app_generate_unique_static_random_addr(struct bd_addr *addr);\r\n\r\n\r\nvoid default_app_generate_unique_static_random_addr(struct bd_addr *addr)\r\n{\r\n    // Check if the static random address is already generated.\r\n    // If it is already generated the two MSB are equal to '1'\r\n    if (!(addr->addr[BD_ADDR_LEN - 1] & GAP_STATIC_ADDR))\r\n    {\r\n        uint32_t val1, val2;\r\n        uint32_t timestamp;\r\n\r\n#if defined (__DA14531__)\r\n        uint8_t package;\r\n        uint32_t tester, position, adc_single, adc_diff;\r\n#else\r\n        uint32_t siteID, trim;\r\n#endif\r\n\r\n        // Initialize OTP controller\r\n        hw_otpc_init();\r\n\r\n#if defined (__DA14531__)\r\n        hw_otpc_enter_mode(HW_OTPC_MODE_READ);\r\n#else\r\n        hw_otpc_manual_read_on(false);\r\n#endif\r\n\r\n        // Read OTP values\r\n#if defined (__DA14531__)\r\n        package = (GetWord32(OTP_HDR_PACKAGE_ADDR) & 0x000000FF);\r\n        position = GetWord32(OTP_HDR_POSITION_ADDR);\r\n        tester = (GetWord32(OTP_HDR_TESTER_ADDR) & 0x00FFFFFF);\r\n        timestamp = GetWord32(OTP_HDR_TIMESTAMP_ADDR);\r\n\r\n        adc_single = (otp_cs_get_adc_single_offset() << 16) | otp_cs_get_adc_single_ge();\r\n        adc_diff = (otp_cs_get_adc_diff_offset() << 16) | otp_cs_get_adc_diff_ge();\r\n\r\n        val1 = timestamp ^ position ^ adc_single;\r\n        val2 = tester ^ package ^ adc_diff;\r\n#else\r\n        timestamp = GetWord32(OTP_TIMESTAMP_ADDR);  // Device time stamp\r\n        siteID = GetWord8(OTP_SITE_ID_ADDR) & 0x7;  // Get the Site ID (3-bits)\r\n        timestamp ^= (siteID << 30);                // Add test site to MSB\r\n\r\n        trim = siteID >> 2;                         // MSb of Site ID\r\n        trim |= (GetWord8(OTP_BANDGAP_ADDR) & 0x3F) << 1;   // Bandgap trim (6-bits)\r\n        trim |= (GetWord8(OTP_LNA_ADDR) & 0x7F) << 7;       // LNA trim (7-bits)\r\n\r\n        val1 = timestamp;\r\n        val2 = trim;\r\n#endif\r\n\r\n        hw_otpc_disable();\r\n\r\n        // Shuffle the bits to 'look' more random\r\n        val1 = hash(val1);\r\n        val2 = hash(val2);\r\n\r\n        // Assign unique address\r\n        addr->addr[0] = val1 & 0xFF;\r\n        addr->addr[1] = (val1 >> 8) & 0xFF;\r\n        addr->addr[2] = (val1 >> 16) & 0xFF;\r\n        addr->addr[3] = (val1 >> 24) & 0xFF;\r\n        addr->addr[4] = val2 & 0xFF;\r\n        addr->addr[5] = val2 >> 8;\r\n\r\n        // The two MSB shall be equal to '1'\r\n        addr->addr[BD_ADDR_LEN - 1] |= GAP_STATIC_ADDR;\r\n    }\r\n}\r\nAs you can see for DA14531, we read package, position, tester, timestamp, and the ADC calibration values from the OTP header and then we combine all of them while shuffling the bits in order to create a unique BDA.\u00a0Similar approach could be used to create a unique Passkey.However you are looking for a Production solution that can keep track of those Passkeys for each device etc.\n\nQuote: Is there software/hardware available that enables programming firmware onto the da14531mod device SPI Flash whereafter it either:\n\nReads the unique number from the OTP at adds it to a file (to be used for printing labels as well as for production documentation)or\nWrites a unique number from a prepared list of numbers in a file, editing the file to show which numbers have been used/printed?\n\n\nAre there other reccommended ways to setup a workflow where a worker has to label every device with unique labels? reliabilly keeping track of it all.\n\nFor Production purposes we strongly suggest our Production Tool Kit board: https://www.renesas.com/us/en/products/wireless-connectivity/bluetooth-low-energy/da14580prodtlkt-bluetooth-low-energy-soc-16-site-production-line-tool-kit#design_development.With PLT you can program and test 16 boards at the same time.\u00a0I am not going to describe all the procedure in detail since you can check this out on the PLT User Manual but I am going to show only the approach you can do on your side for this unique number:On the SmartBond_CFG_PLT.exe you can set all the parameters and tests you want to run on your custom devices. On the Memory Functions and Memory Header tabs you can configure OTP and SPI Flash. : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707318716909v1.pngAs you can see, you can select the Custom Memory Data option and specify if you want to use OTP or SPI Flash, the specific Address the data will be stored and the Data you want to store there.You can create a CSV file with unique Passkeys and the PLT will automatically write each pin on each device on the address you have specified.\u00a0You can also use a Barcode scanner or add manually the data you want.You can also add another custom test to read the specific Address so you are sure that the Passkey is correctly stored.\u00a0Another approach would be to create executables with CLI commands and use them with the PLT board to program the devices.\u00a0\n\nQuote: Maybe the Datamatrix present on the DA14531 contains something present on the OTP memory?I have read two different modules giving me the two strings:S23142907L09\u00a0 S23143022R15It would be most convenient if that were the case as we might be able to scan that and print a label containing the string data.\n\nCould you please clarify what do you mean by \"Datamatrix present on the DA14531\"?I did not understand how those two strings were generated.\u00a0Best Regards,OV_Renesas"
            },
            {
                "role": "Chatbot",
                "content": "Thank you for the reply, I'll have a thorough look at your answer tomorrow.Quick answer to the matrix question:Sorry, i didn't specify that the data matrixes are printed on top of the DA14531MOD module RF shields in the corner. Each module have a unique matrix and i have read them with the online reader on this page:https://online-barcode-reader.inliteresearch.com/: https://online-barcode-reader.inliteresearch.com/I have shared pictures of the matrixes on some of my modules as replies in this thread.Once again, thank you for all the help OV"
            },
            {
                "role": "User",
                "content": "Hi Clk,Thank you for the reply.\n\nQuote: Quick answer to the matrix question:Sorry, i didn't specify that the data matrixes are printed on top of the DA14531MOD module RF shields in the corner. Each module have a unique matrix and i have read them with the online reader on this page:https://online-barcode-reader.inliteresearch.com/: https://online-barcode-reader.inliteresearch.com/\n\nFrom my understanding, there is no correlation on the \"Data matrix\" and the OTP Header content.\u00a0I do not think it will be possible to use this Data matrix and guarantee a Unique Passkey generation for all your devices.Best Regards,OV_Renesas"
            },
            {
                "role": "Chatbot",
                "content": "The PLT looks very promising, we will order one, do you know if the golden unit scan test is compatible with RPA? it is mentioned on page 95 in\u00a0https://www.renesas.com/us/en/document/mat/um-b-163-da1453x-da1469x-production-line-tool-software-and-hw-user-manual?r=1580496: https://www.renesas.com/us/en/document/mat/um-b-163-da1453x-da1469x-production-line-tool-software-and-hw-user-manual?r=1580496\u00a0we'll probably get a golden unit as well if it is. Maybe it is included when getting the PLT? - my superiors love the scanner functionality as it resembles a workflow already used in production.Thank you for the help."
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nIam using DA14531 MOD BLE device with sdk CodeLess Version: 6.380.14.22.\nMy requirement is pairing code should support\u00a011 digit authentication.\nI tried to give the same but pairing didn't worked.\nuser_on_app_init()\n{\ncodeless_env.pin = 12345678912;\n}\n\nRegards,\nLaxmi Narayana."
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting your question online.\n\nQuote: My requirement is pairing code should support\u00a011 digit authentication.\nI tried to give the same but pairing didn't worked.\n\nThis is not possible. It is not a limitation of the DA14531 and SDK6 but a feature from the Bluetooth Low Energy Specification v5.1Please refer on the Bluetooth Specification v5.1: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707388063257v1.pngBest Regards,OV_Renesas"
            }
        ],
        [
            {
                "role": "User",
                "content": "Hi Team,\nWhen i click on Connect for the first time pairing pop-up is coming, even if i not entered passcode also it started communicating with BLE Application.\nIn my code i have set\n\u00a0user_app_on_init()\u00a0\n{\ncodeless_env.pin= 123456;\n\n}\nIam expecting, after entering pairing code\u00a0only it should connect and start communicating with Application.\nPls help me in fixing this issue.\n\nRegards,\nLaxmi Narayana."
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for posting\u00a0 your question online.Could you please clarify the Codeless SDK version you are working with?Did you use prior the AT+SEC command to set the Security level you want? Did you explicitly use the AT+PIN command to set the PIN or only inside your code?Have you changed the Services Permissions for this project? By default all Services are accessible without Authorization required, you can change that.Is your device central or peripheral?Please share the exact AT command sequence you used so we can try to replicate this.Best Regards,OV_Renesas"
            },
            {
                "role": "User",
                "content": "Hi OV,\nThank for response, Iam using codeless Version:6.380.14.22.\nwe are not using any AT commands like AT+SEC, AT+PIN and we disabled all AT commands.\nI not touched any services related part in my code.\nMy device is central.\nPls find the attached Zip file.\ncommunity.renesas.com/.../codeless_5F00_5xx.zip: https://community.renesas.com/cfs-file/__key/communityserver-discussions-components-files/297/codeless_5F00_5xx.zip\n\n\n\nRegards,\nLaxmi Narayana"
            },
            {
                "role": "Chatbot",
                "content": "Hi Laxmi,Thank you for the reply.\n\nQuote: we are not using any AT commands like AT+SEC, AT+PIN and we disabled all AT commands.\n\nWhat is the point of using the Codeless SDK if you have disabled all AT commands? Why not create a project with the Generic SDK6?Please check our Central with Security example:\u00a0BLE_SDK6_examples/connectivity/central_Security_Demo at main \u00b7 dialog-semiconductor/BLE_SDK6_examples (github.com): https://github.com/dialog-semiconductor/BLE_SDK6_examples/tree/main/connectivity/central_Security_Demo\n\nQuote:  Iam using codeless Version:6.380.14.22.\n\nQuote: My device is central.\n\nPlease refer on the Codeless SDK Release Notes: https://www.renesas.com/us/en/document/rln/da145xx-codeless-sw-release-notes-v63801863?r=1600456: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707384318181v1.pngThe Bonding support for the Central role in Codeless is supported from SDK v6.380.16.55 version and later.\u00a0You will have to define the CFG_BOND_CMD_SUPPORTED macro in the da1458x_config_advanced.h file.On the SDK v6.380.14.22,\u00a0if you define the CFG_BOND_CMD_SUPPORTED macro and build the project you should receive the following in the output window: : https://community.renesas.com/resized-image/__size/640x480/__key/communityserver-discussions-components-files/297/pastedimage1707384434845v2.pngYou should either migrate into a later Codeless SDK version or use the Generic SDK6 to create your application since you are not utilizing the AT commands.\u00a0Best Regards,OV_Renesas"
            }
        ]
    ]
}